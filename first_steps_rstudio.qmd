# First Steps in RStudio

      
-   what is R and Rstudio. Installing them
-   intro to rstudio, scripts
-   data types and data structures, project oriented workflow
-   using the help
-   Your first plot!

## What are R and Rstudio?

## Installing R and Rstudio

## Introduction to RStudio

In this section we will introduce you to working in RStudio. We will explain the windows that you see when you first open RStudio and how to change its appearance to suit you. Then we will see how we use R as a calculator and how assign values to R objects.

### Changing the appearance

When you first open RStudio it will display three panes and have a white background @fig-rstudio-first-open

![When you first open RStudio it will be white with three panes](images/rstudio-first-open.png){#fig-rstudio-first-open fig-alt="screenshot of RStudio's default appearance" width="800"}

We will talk more about these three panes soon but first, let's get into character - the character of a programmer! You might have noticed that people comfortable around computers are often using dark backgrounds. A dark background reduces eye strain and often makes "code syntax" more obvious making it faster to learn and understand at a glance. Code syntax is the set of rules that define what the various combinations of symbols mean. It takes time to learn these rules and you will learn best by repeated exposure to writing, reading and copying code. You have done this before when you learned your first spoken language. All languages have syntax rules governing the order of words and we rarely think about these consciously, instead relying on what sounds and looks right. And what sounds and looks right grows out repeated exposure. For example, 35% of languages, including English, Chinese, Yoruba and Polish use the Subject-Verb-Object syntax rule:

-   English: Emma likes R
-   Chinese: 艾玛喜欢R Emma xǐhuān R
-   Yoruba: Emma fẹran R
-   Polish: Emma lubi R

and 40% use Subject-Object-Verb including Turkish and Korean

-   Turkish: Emma R'yi seviyor
-   Korean: 엠마는 R을 좋아한다 emmaneun Reul joh-ahanda

You learned this rule in your language very early, long before you were conscious of it, just by being exposed to it frequently. In this book I try to tell you the syntax rules, but you will learn most from looking at, and copying code. Because of this, it is well worth tinkering with the appearance of RStudio to see what Editor theme makes code elements most obvious to you.

There is a tool bar at the top of RStudio. Choose the `Tools` option and then `Global options`. This will open a window where many options can be changed @fig-tools-global-options-appearance.

![Tools | Global Options opens a window. One of the options is Appearance](images/tools-global-options-appearance.png){#fig-tools-global-options-appearance fig-alt="screenshot of RStudio's Global Options window showing the Appearance options" width="800"}

Go to the `Appearance` Options and choose and Editor theme you like, followed by OK.

The default theme is Textmate. You will notice that all the Editor themes have syntax highlighting so that keywords, variable names, operators, etc are coloured but some themes have stronger contrasts than others. For beginners, I recommend Vibrant Ink, Chaos or Merbivore rather than Dreamweaver or Gob which have little contrast between some elements. However, individuals differ so experiment for yourself. I tend to vary between Solarised light and dark.

You can also turn one Screen Reader Support in the Accessibility Options in Tools \| Global Options.

Back to the Panes. You should be looking at three windows: One on the left and two on the right[^first_steps_rstudio-1].

The window on the left, labelled Console, is where R commands are executed. In a moment we will start by typing commands in this window. Over on the right hand side, at the top, have several tabs, with the Environment tab showing. This is where all the objects and data that you create will be listed. Behind the Environment tab is the History and later you will be able to view this to see a history of all your commands.

On the bottom right hand side, we have a tab called Plots which is where your plots will go, a tab called Files which is a file explorer just like Windows Explorer or Mac Finder, and a Packages tab where you can see all the packages that are installed. The Packages tab also provides a way to install additional packages. The Help tab has access to all the manual pages.


Right, let's start coding! 

### Your first piece of code

We can use R just like a calculator. Put your cursor after the `>` in the Console, type `3 + 4` and ↵ Enter to send that command:

```{r}
3+4
```


The `>` is called the "prompt". You do not have to type it, it tells you that R is ready for input.

Where I've written `3+4`, I have no spaces. However, you *can* have spaces, and in fact, it's good practice to use spaces around your operators because it makes your code easier to read. So a better way of writing this would be:


```{r}
3 + 4
```

In the output we have the number `7`, which, obviously, is the answer. From now on, you should assume commands typed at the console should be followed by ↵ Enter to send them.

The one in brackets, `[1]`, is an index. It is telling you that the `7` is the first element of the output. We can see this more clear if we create something with more output. For example, `50:100` will print the numbers from 50 to 100.

```{r}
50:100
```

The numbers in the square brackets at the beginning of the line give you the index of the first element in the line. R is telling you where you are in the output.

### Assigning variables

Very often we want to keep input values or output for future use. We do this with 'assignment'
An assignment is a statement in programming that is used to set a value to a variable name. In R, the operator used to do assignment is ` <-`. It assigns the value on the right-hand to the value on the left-hand side.

To assign the value `3` to `x` we do:

```{r}
x <- 3
```

and ↵ Enter to send that command.

The assignment operator is made of two characters, the `<` and the `-` and there is a keyboard short cut: Alt+- (windows) or Option+- (Mac). Using the shortcut means you'll automatically get spaces. 
You won't see any output when the command has been executed because there is no output. However, you will see `x` listed under Values in the Environment tab (top right).

Your turn! Assign the value of `4` to a variable called `y`:
```{r}
#| code-fold: true
y <- 4
```



Check you can see `y` listed in the Environment tab.

We can use these values in calculations just like we could in in maths and algebra.

```{r}
x + y
```


We get the output of `7` just as we expect. Suppose we make a mistake when typing, for example, accidentally pressing the u button instead of the y button:

```{r}
#| error: true
x + u
```

We get an error. We will probably see this error quite often - it means we have tried to use a variable that is not in our Environment. So when you get that error, have a quick look up at your environment[^first_steps_rstudio-2].

We made a typo and will want to try again. We usefully have access to all the commands that  previously entered when we use the ↑ Up Arrow. This is known as command recall. Pressing the ↑ Up Arrow once recalls the last command; pressing it twice recalls the command before the last one and so on.  

Recall the `x + u` command (you may need to use the ↓ Down Arrow to get back to get it) and use the Back space key to remove the `u` and then add a `y`.


A lot of what we type is going to be wrong - that is not because you are a beginner, it is same for everybody! On the whole, you type it wrong until you get it right and then you move to the next part. This means you are going to have to access your previous commands often. The History - behind the Environment tab - contains everything you can see with the ↑ Up Arrow. You can imagine that as you increase the number of commands you run in a session, having access the this record of everything you did is useful. However, the thing about the history is, that it has *everything* you typed, including all the wrong things!

What we really want is a record of everything we did that was right! This is why we use scripts instead of typing directly into the console. 

### Using Scripts

An R script is a plain text file with a `.R` extension and containing R code. Instead of typing into the console, we normally type into a script and then send the commands to the console when we are ready to run them. Then if we've made any mistakes, we just correct our script and by the end of the session, it contains a record of everything we typed that worked.

You have several options open a new script:

-   button: Green circle with a white cross, top left and choose R Script
-   menu: File | New File | R Script
-   keyboard shortcut: Ctrl+Shift+N (Windows) / Shift+Command+N (Mac)


Open a script and add the two assignments to it:
```{r}
x <- 3
y <- 4
```

To send the first line to the console, we place our cursor on the line (anywhere) and press Ctrl-Enter (Windows) / Command-Return. That line will be executed in the console and in the script, our cursor will jump to the next line. Now, send the second command to the console in the same way.

From this point forward, you should assume commands should be typed into the script and sent to the console.

Add the incorrect command attempting to sum the two variables:

```{r}
#| error: true
x + u
```

To correct this, we do not add another line to the script but instead edit the existing command:

```{r}
x + y
```


In addition to making it easy to keep a record of your work, scripts have another big advantage, you can include 'comments' - pieces of text that describe what the code is doing.  Comments are indicated with a `#` in front of them. You can write anything you like after a `#` and R will recognise that it is not code and doesn't need to be run.

```{r}
# This script performs the sum of two values

x <- 3    # can be altered
y <- 4    # can be altered

# perform sum
x + y
```
The comments should be highlighted in a different colour than the code. They will be italic in some Editor themes.

You have several options save a script:

-   button: use the floppy disc icon
-   menu: File | Save 
-   keyboard shortcut: Ctrl+S (Windows) / Command+S (Mac)

You could use a name like `test1.R` - note the `.R` extension wil be added automatically.

### Other types of file in RStudio

-   `.R` script code but not the objects. You always want to save this
-   `.Rdata` also known as the workspace or session, the objects, but not the code. You usually do not want to save this. Some exceptions e.g., if it takes quite a long time to run the commands.
-   text files

I recommend changing some of the default settings to make your life a little easier. Go back into the Global Options window with Tools | Global Options. The top tab is General @fig-tools-global-options-general.

![Tools | Global Options opens a window. One of the options is General. This where you can change the default behaviour of RStudio. Highlighted is the default (start up) directory and the option to Save and Restore the workspace.](images/tools-global-options-general.png){#fig-tools-global-options-general fig-alt="screenshot of RStudio's Global Options window showing the General options" width="800"}


First, we will set our default working directory. Under 'Default working directory (when not in a project[^first_steps_rstudio-3]):' click Browse and navigate to a through your file system to a folder where you want to work. You may want to create a folder specifically for studying this book.

Second, we will change the Workspace options. Turn off 'Restore .RData into workspace at startup' and change 'Save workspace to .RData on exit' to 'Never'. These options mean R will start up clean each time.

## Recap of RStudio anatomy

This figure (see @fig-rstudio-anatomy[^first_steps_rstudio-4]) summarises shows what each of the four RStudio panes and what they are used for to summarise much of what we have covered so far. 
```{r}
#| echo: false
#| label: fig-rstudio-anatomy
#| fig-cap: "A screenshot of RStudio's four panes annotated with what each pane is for."
knitr::include_graphics("http://www-users.york.ac.uk/~er13/RStudio%20Anatomy.svg")
```

## Data types and structures in R

just the basics but you can get a long way with these

### Types of values

### Data structures

## RStudio Projects

-   `.RProj` indicates a folder is an RStudio Project


## Installing packages


## Your first graph

very simple ggplot, geom point scatter


## Summary



[^first_steps_rstudio-1]: If this is not a fresh install of RStudio, you might be looking at fours windows, two on the left and two on the right. That's fine - we will al be using four shortly. For the time being, you might want to close the "Script" window using the small cross next to "Untitled1".

[^first_steps_rstudio-2]: When we are using scripts, it is very easy to write code but forget to run it. Very often when you see this error it will because you have written the code to create an object but forgotten to execute it. 

[^first_steps_rstudio-3]: We will find out what an RStudio Project is very soon. You will want to use a project for most of your work - they make everything a little easier.

[^first_steps_rstudio-4]: You can zoom into this at the [Direct link](https://www-users.york.ac.uk/~er13/RStudio%20Anatomy.svg)
