{
  "hash": "e16c9e8ec98bb6cc5e946603d083a52b",
  "result": {
    "engine": "knitr",
    "markdown": "# About R and RStudio {#sec-about-R-and-RStudio}\n\n\n::: {.callout-warning} \n## First draft\nYou are reading a work in progress. This page is a first draft but should be readable.\n:::\n\nThis chapter starts by explaining what R and RStudio are and how you can\ninstall them on your own machine. We introduce you to working in\nRStudio, changing its appearance to suit you and to the key things you\nneed to know about R.\n\n## What are R and Rstudio?\n\n### What is R?\n\nR is a programming language and environment for statistical computing\nand graphics which is free and open source. It is widely used in\nindustry and academia. It is what is known as a \"domain-specific\"\nlanguage meaning that it is designed especially for doing data analysis\nand visualisation rather than a \"general-purpose\" programming language\nlike Python and C++. It makes doing the sorts of things that\nbioscientists do a bit easier than in a general purpose-language.\n\n### What is RStudio?\n\nRStudio is what is known as an \"integrated development environment\"\n(IDE) for R made by [Posit](https://posit.co/). IDEs have features that\nmake coding a little easier.For example, syntax highlighting, code\ncompletion and viewers for files, code objects, packages and plots. You\ndon't have to use RStudio to use R but it is very helpful.\n\n### Why is it better to use R than a spreadsheet program?\n\nSpreadsheet programs like Excel or googlesheets can be very useful for\nrecording and organising data but they are not statistical packages so\nalthough you can carry out some analysis tasks in them they are\n[limited](https://www.gapintelligence.com/blog/understanding-r-programming-over-excel-for-data-analysis/),\nget things wrong ([known about since\n1994](https://www.sciencedirect.com/science/article/abs/pii/0167947394901775))\nand [teach you bad data\nhabits](https://www.teampay.co/blog/biggest-excel-mistakes-of-all-time).\nSpreadsheets encourage you to do things that are [going to make analysis\ndifficult](https://datacarpentry.org/2015-05-03-NDIC/excel-ecology/02-common-mistakes.html).\n\n### Why is it better to use R than a menu-driven statistics program?\n\n-   R is free and open source which it will always be available to you .\n-   Carrying out data analysis using coding makes everything you do\n    reproducible\n-   The skills and expertise you gain through learning R are highly\n    transferable -- much more so than those acquired using SPSS.\n-   See [Thomas Mock's\n    demonstration](https://rstudio.com/resources/webinars/a-gentle-introduction-to-tidy-statistics-in-r/)\n    of doing some data analysis in R including \"The Kick Ass Curve\".\n\nThere are other good options such as Julia and Python and you are\nencouraged to explore these. We chose R in part because of the [R\ncommunity which is one of R's greatest\nassets](https://ropensci.org/blog/2017/06/23/community/), being vibrant,\ninclusive and supportive of users at all levels.\n\n## Installing R and Rstudio\n\nYou will need to install both R and RStudio to use them on your own\nmachine. Installation is normally straightforward but you can [follow a\ntutorial](https://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome).\n\n### Installing R\n\nGo to <https://cloud.r-project.org/> and download the \"Precompiled\nbinary distributions of the base system and contributed packages\"\nappropriate for your machine.\n\n#### For Windows\n\nClick \"Download R for Windows\", then \"base\", then \"Download R 4.#.# for\nWindows\". This will download an `.exe` file. Once downloaded, open\n(double click) that file to start the installation.\n\n#### For Mac\n\nClick \"Download R for (Mac) OS X\", then \"R-4.#.#.pkg\" to download the\ninstaller. Run the installer to complete installation.\n\n#### For Linux\n\nClick \"Download R for Linux\". Instructions on installing are given for\nDebian, Redhat, Suse and Ubuntu distributions. Where there is a choice,\ninstall both `r-base` and `r-base-dev`.\n\n### Installing R Studio\n\nGo to <https://posit.co/download/rstudio-desktop/>\n\n## Packages\n\nA R package is a collection of R functions which are related to a\nparticular task or set of tasks. When you install R, it comes with a set\nof packages known as the **base** packages. These are **`stats`**,\n**`graphics`**, **`grDevices`**, **`utils`**, **`datasets`**,\n**`methods`** and **`base`**. You can a lot done with these packages!\nHowever there are many other packages that allow you extend the\nfunctionality of R to do all manner of specialised tasks in\nbioinformatics, spatial analysis, audio/image analysis and almost\nanything else you can think of. These packages are written by the R\ncommunity and are available for free -- this is one of the strengths of\nan open source language like R.\n\nTo use a package that is not one of the base packages you need to\ninstall it from a package repository. The are two main repositories for\nR packages:\n\n-   [CRAN](https://cran.r-project.org/) (Comprehensive R Archive\n    Network) is the official and default repository for R packages. You\n    can install packages from CRAN using the `install.packages()`\n    function in R. There is also a menu option in RStudio to install\n    packages from CRAN.\n\n-   [Bioconductor](https://www.bioconductor.org/) is a repository\n    specifically for bioinformatics packages. You can install packages\n    from Bioconductor using the `BiocManager::install()` function in R.\n\nYou can also install packages from other sources, such as GitHub. Github\nis a popular platform for hosting code, often including the latest\nversions of packages that have not yet been submitted to CRAN. Many\ndevelopers release experimental or in-progress packages on GitHub with\nthe newest features.\n\nIn the next chapter you will install your first package, the\n[`tidyverse`](https://www.tidyverse.org/), which is a collection of\npackages that are designed to work together to make data analysis easier\nand more intuitive.\n\n## Introduction to RStudio\n\nIn this section we will introduce you to working in RStudio. We will\nexplain the windows that you see when you first open RStudio and how to\nchange its appearance to suit you.\n\n### Changing the appearance\n\nWhen you first open RStudio it will display three panes and have a white\nbackground @fig-rstudio-first-open\n\n::: {#fig-rstudio-first-open}\n\n![](images/rstudio-first-open.png)\n\n**Screenshot of RStudio the first time you open it.** When you\nfirst open RStudio it will be white with three panes. The *Console* is\non the left, with the *Environment* and *Files* panes on the\nright.\n\n:::\n\nWe will talk more about these three panes soon but first, let's get into\ncharacter - the character of a programmer! You might have noticed that\npeople comfortable around computers are often using dark backgrounds. A\ndark background reduces eye strain and often makes \"code syntax\" more\nobvious making it faster to learn and understand at a glance. Code\nsyntax is the set of rules that define what the various combinations of\nsymbols mean. It takes time to learn these rules and you will learn best\nby repeated exposure to writing, reading and copying code. You have done\nthis before when you learned your first spoken language. All languages\nhave syntax rules governing the order of words and we rarely think about\nthese consciously, instead relying on what sounds and looks right. And\nwhat sounds and looks right grows out repeated exposure. For example,\n35% of languages, including English, Chinese, Yoruba and Polish use the\nSubject-Verb-Object syntax rule:\n\n-   English: Emma likes R\n-   Chinese: 艾玛喜欢R Emma xǐhuān R\n-   Yoruba: Emma fẹran R\n-   Polish: Emma lubi R\n\nand 40% use Subject-Object-Verb including Turkish and Korean\n\n-   Turkish: Emma R'yi seviyor\n-   Korean: 엠마는 R을 좋아한다 emmaneun Reul joh-ahanda\n\nYou learned this rule in your language very early, long before you were\nconscious of it, just by being exposed to it frequently. In this book I\ntry to tell you the syntax rules, but you will learn most from looking\nat, and copying code. Because of this, it is well worth tinkering with\nthe appearance of RStudio to see what Editor theme makes code elements\nmost obvious to you.\n\nThere is a tool bar at the top of RStudio. Choose the `Tools` option and\nthen `Global options`. This will open a window where many options can be\nchanged @fig-tools-global-options-appearance.\n\n::: {#fig-tools-global-options-appearance}\n\n![](images/tools-global-options-appearance.png)\n\n**Screenshot of RStudio's Global Options window showing the Appearance options**\nChoosing Tools \\| Global Options opens a window where many things,\nlisted on the left, can be customised. You can change the theme and\nthe font under *Appearance*\n\n:::\n\nGo to the `Appearance` Options and choose and Editor theme you like,\nfollowed by OK.\n\nThe default theme is called Textmate. You will notice that all the\nEditor themes have syntax highlighting so that keywords, variable names,\noperators, etc are coloured. Some themes have stronger contrasts than\nothers. For beginners, I recommend Vibrant Ink, Chaos or Merbivore\nrather than Dreamweaver or Gob which have little contrast between some\nelements. However, individuals differ so experiment for yourself. I tend\nto vary between Solarised light and dark.\n\nYou can also turn one Screen Reader Support in the Accessibility Options\nin Tools \\| Global Options.\n\nBack to the Panes. You should be looking at three windows: One on the\nleft and two on the right[^about_r_and_rstudio-1].\n\n[^about_r_and_rstudio-1]: If this is not a fresh install of RStudio, you\n    might be looking at fours windows, two on the left and two on the\n    right. That's fine - we will all be using four shortly. For the time\n    being, you might want to close the \"Script\" window using the small\n    cross next to \"Untitled1\".\n\nThe window on the left, labelled *Console*, is where R commands are\nexecuted. In the next chapter we will start by typing commands in this\nwindow. Over on the right hand side, at the top, are several tabs, with\nthe *Environment* tab showing. This is where all the objects and data\nthat you create will be listed. Behind the *Environment* tab is the\n*History* tab and later you will be able to view this to see a history\nof all your commands.\n\nOn the bottom right hand side, we have a *Plots* tab, which is where\nyour plots will go, a *Files* tab which is a file explorer just like\nWindows Explorer or Mac Finder, and a *Packages* tab where you can see\nall the packages that are installed. The Packages tab also provides a\nway to install additional packages. The *Help* tab has access to all the\nmanual pages.\n\n## Summary\n\n1.  **R** is a free, open-source programming language for statistical\n    computing and graphics. **RStudio** is an integrated development\n    environment (IDE) that provides a user-friendly interface for\n    working with R, offering features like syntax highlighting,\n    auto-completion, and plot viewers.\n\n2.  R enables reproducible, script-based data analysis—more robust and\n    flexible than spreadsheets or menu-driven tools like SPSS. It is\n    especially well-suited for scientific research and has wide adoption\n    in academia and industry.\n\n3.  R is installed from [CRAN](https://cloud.r-project.org/), and\n    RStudio is installed from\n    [Posit](https://posit.co/download/rstudio-desktop/). The process\n    varies slightly for Windows, macOS, and Linux users.\n\n4.  R’s capabilities are extended by **packages**—collections of\n    functions for specific tasks. Packages can be installed from\n    **CRAN**, **Bioconductor** (for bioinformatics), or GitHub. The\n    `install.packages()` and `BiocManager::install()` functions are\n    commonly used.\n\n5.  RStudio includes panes for the **Console**, **Environment**,\n    **Files**, **Plots**, **Packages**, and **Help**. Users can\n    customize the interface (e.g., themes for better syntax visibility).\n    Learning R syntax comes best from repetition and experimentation.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}