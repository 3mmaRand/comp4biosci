{
  "hash": "02dd63337b7df2f777ca82b7775f41d4",
  "result": {
    "engine": "knitr",
    "markdown": "# Workflow in RStudio\n\n\n\n\n\n::: {.callout-warning} \n## First draft\nYou are reading a work in progress. This page is a first draft but should be readable.\n:::\n\n\n\n\nThis chapter give you some tips for make your workflow in RStudio easier.\n\n## RStudio Projects\n\n### What is an RStudio Project?\n\nUsing an RStudio Project will help you organise your analysis work, make it much easier to manage working directories and paths and also to collaborate with others including yourself on another computer! An RStudio Project is a folder that contains a file with the extension `.RProj` and all the code, data, and other files associated with a particular piece of work.\n\nFor example, if you were analysing some data on stem cells you might have an RStudio Project called \"stem-cells\". This would be a folder called `stem-cells`, known as the project folder, which contains the `stem-cells.Rproj` file - both of these are created automatically. Then you might create folders for the data and for figures from the analysis along with the script that contains code for importing the data, doing the analysis, creating the figures and writing the figures to file.\n\n```\n-- stem-cells\n   |__stem-cells.Rproj\n   |__analysis.R\n   |__data-raw\n      |__2019-03-21_donor_1.csv\n      |__2019-03-21_donor_2.csv\n      |__2019-03-21_donor_3.csv\n   |__figures\n      |__01_volcano_donor_1_vs_donor_2.png\n      |__02_volcano_donor_1_vs_donor_3.png\n\n```\nWhen you open an RStudio Project, it automatically sets the project directory as the working directory. This means when you write your code with paths relative to the project directory your code will work the same on any computer you send that RStudio Project to.\n\n\n### Creating an RStudio Project\n\n-   Click on the drop-down menu on top right where it says \"Project: (None)\" and choose New Project\n\n-   A dialogue box will appear. Choose \"New Directory\", then \"New Project\"\n\n-   Click the Browse button next to \"Create project as a subdirectory of:\" to navigate to a place in your file system where you want to create the project folder. \n\n-   Type a name the \"Directory name\". This should be something that helps you identify the contents. Follow the advice in [Naming things](organising_work.html#naming-things)\n\n\n## Some useful settings\n\nYou can adjust some of the default settings in RStudio you suit your own needs better. The settings are accessed through the Tools Menu under Global options. I like the following settings:\n\n-   When using RStudio Projects the working directory is the Project directory but when you start RStudio up and want to make a new project you might find the default location doesn't suit you. You can [change the default directory when not in a project](first_steps_rstudio.html#changing-some-defaults-to-make-life-easier).\n\n-   To ensure you have a fresh session with no R objects in the workspace you can [change Workspace options](first_steps_rstudio.html#changing-some-defaults-to-make-life-easier).\n\n-   In the Code options\n     \n     -   Display - check Use rainbow brackets which makes it easier to see which bracket are pairs\n     -   Display - check Show margin which will add a line at 80 characters to help you use new lines more often and not create very long lines of code that are difficult to read\n     -   Diagnostics - check Show diagnostics for R which will put a marker on the line that includes a syntax error and make a suggestion what the error is\n     -   Diagnostics - check Provide R style diagnostics (e.g. whitespace) which will help you layout your code\n     -   \n\n## Handy housekeeping command\n\n### Where am I?\n\nThere are several ways you can find out what your working directory is.\n\n1.  Code. The `getwd()` (**get** **w**orking **d**irectory)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n\n2.  Along the top of the Console window. There is also a little arrow you can click to show your working directory in the Files pane.\n\n3.  In the Files pane, provided to have not navigated around in there. If you have, you can view your working directory using blue wheel and choosing \"Go To Working Directory\" or by using the arrow on the top of the Console window\n\n### What files can I see?\n\nThere are several ways you can see the files and folders in your working directory.\n\n1.  Code. The `dir()` (**dir**ectory)\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dir()\n    ```\n    :::\n\n\n\n\n    -   `dir()` list the contents of the working directory\n    -   `dir(\"..\")` list the contents of the directory above the working directory\n    -   `dir(../..)` list the contents of the directory two directories above the working directory\n    -   `dir(\"data-raw\")` list the contents of a folder call data-raw which is in the working directory.\n\n2.  Look in the the Files pane, provided to have not navigated around in there. If you have, you can view your working directory using blue wheel and choosing \"Go To Working Directory\" or by using the arrow on the top of the Console window\n\n### What R objects can I see?\n\n1.  Code. The `ls()` (**l**i**s**t)\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ls()\n    ```\n    :::\n\n\n\n\n2.  Look in the the Environment pane\n\n## Understanding the pipe `|>`\n\nThe pipe operator improves code readability by:\n\n-   structuring sequences of data operations left-to-right and top to bottom rather than from inside and out),\n-   minimizing the need for intermediates,\n-   making it easy to add steps anywhere in the sequence of operations.\n\nFor example, suppose we want to apply a log-square root transformation which is sometimes applied to make a flat distribution more normal. There are two approaches we could use without the pipe: nesting the functions and creating an intermediate. We will consider both of these. First, let us generate a few numbers of work with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate some numbers\n# this will give me ten random numbers between 1 and 100\nnums <- sample(1:100, size = 10)\n```\n:::\n\n\n\n\nTo apply the transformation we can nest the functions so the output put of `sqrt(nums)` becomes the input of `log()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# apply a log-square root transformation\ntnums <- log(sqrt(nums))\ntnums\n##  [1] 2.021526 1.994492 2.297560 2.232954 1.472219 1.748254 2.209420 2.063567\n##  [9] 2.221326 1.039721\n```\n:::\n\n\n\n\nThe first function to be applied is innermost. When we are using just two functions, the level of nesting does not cause too much difficulty in reading the code. However, you can image this gets more unreadable as the number of functions applied increases. It also makes it harder to debug and find out where an error might be. One solution is to create intermediate variables so the commands a given in order:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# apply a log-square root transformation\nsqrtnums <- sqrt(nums)\ntnums <- log(sqrtnums)\n```\n:::\n\n\n\n\nUsing intermediates make your code easier to follow at first but clutters up your environment and code with variables you don't care about. You also start of run out names!\n\nThe pipe is a more elegant and readable solution. It allows you to send the output of one operation as input to the next function. The pipe has long been used by Unix operating systems (where the pipe operator is `|`). The R pipe operator is `|>`, a short cut for which is Ctrl+Shift+M.\n\nUsing the pipe, we can apply out transformation with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntnums <- nums |> \n  sqrt() |> \n  log()\n```\n:::\n\n\n\n\nThe command are in the order applied, there are no intermediates and the code is easier to debug and to build-up step-by-step..\n\nNote that `|>` is the pipe that comes with base R which was only added in the last couple of years. Before it existed, `**tidyverse**` had a pipe operator provided by the `*magrittr**` package. The magrittr pipe is `%>%`. In your googling, you may well see code written using the `%>%`. In most cases, the pipes are interchangeable.\n\n[What They Forgot to Teach You About R](https://rstats.wtf/) @bryanWFT\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}