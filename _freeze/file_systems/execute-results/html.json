{
  "hash": "4b62f9e538e61015de7185cf7929a80b",
  "result": {
    "engine": "knitr",
    "markdown": "# Understanding file systems\n\n\n::: {.callout-tip} \n## Just needs proof reading\nYou are reading a work in progress. This page is compete but needs final proof reading.\n:::\n\nA file system is made up of files and folders organised in a\nhierarchical way. Understanding file types and being able to navigate\nyour computer's file system and purposefully organise and manipulate\nfiles are essential computational skills. We will first talk about\ndifferent file types before covering their organisation in a file\nsystem. This will lead us on to the concepts of working directories and\npaths. It is hard to overstate how useful an understanding of working\ndirectories and paths are for comfortable computing. Without this\nunderstanding, you can write basically correct code, such as for\nimporting data, which will not work because you don't know how to tell\nthe computer where the file is.\n\n## Files\n\nA file is a unit of storage on a computer with a name that uniquely\nidentifies it. Files can be of different types depending on the sort of\ninformation held in them. The file name very often consists of two\nparts, separated by a dot:\n\n-   the name - the base name of the file\n\n-   an extension that should indicate the format or content of the file.\n\nSome examples are report.docx, analysis.R, culture.csv and readme.txt.\nThere is a relationship between the file extension and the file type\n\n## Plain text files\n\nOne of the simplest types of file is a \"text file\", also known as ASCII\nfiles, which contains only text characters and no formatting, images or\ncolours. Text files have many different extensions to indicate what the\ntext content represents. A few of these are given in\n@tbl-text-file-extensions.\n\n\n::: {#tbl-text-file-extensions}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Extension </th>\n   <th style=\"text-align:left;\"> Content usually inside </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> .txt </td>\n   <td style=\"text-align:left;\"> Could be any kind of text, including data </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .tab </td>\n   <td style=\"text-align:left;\"> Values, often data, separated by tabs </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;\"> Values, often data, separated by commas </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .R </td>\n   <td style=\"text-align:left;\"> R commands and comments </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .py </td>\n   <td style=\"text-align:left;\"> Python commands and comments </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .fasta </td>\n   <td style=\"text-align:left;\"> Nucleotide or amino acid sequences </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nSome common text file extensions and the content the extension usually indicates.\n\n\n:::\n\nPlain text files are extremely portable which means they can be opened\non any computer by a very large number of programs. Simple text editors\nwhich exist on any system like Windows Notepad or Mac's TextEdit will\nopen text files where as they will not open program-specific files like,\nfor example, .xlsx (Excel) or .docx (Word) files (@fig-xlsx-in-notepad).\nIt is usually easy for application designers to make an application\nmanage plain text files. This means\n\n\n:::{#fig-xlsx-in-notepad}\n\n![](images/xlsx-in-notepad.png)\n\n**How an Excel file looks if you open it with Notepad.** Notepad will \nopen an Excel file but the contents are a mess of strange\ncharacters and the content is unreadable. This is because Excel \nfiles are not plain text files.\n\n:::\n\nData is commonly held in text files because of their portability.\n\n## Plain text files with markup\n\nText files can also include \"markup\" which are text characters used to\nannotate text to control how it is displayed or processed. Such files\nretain their portability and are human readable. You will have used them\noften! (@tbl-mark-up-text-file-extensions)\n\n\n::: {#tbl-mark-up-text-file-extensions}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Extension </th>\n   <th style=\"text-align:left;\"> Used for </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> .html </td>\n   <td style=\"text-align:left;\"> Hypertext Markup Language - for documents \n                              designed to be displayed in a web browser. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .md </td>\n   <td style=\"text-align:left;\"> markdown - a lightweight markup language \n                              designed to be human readable </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .Rmd </td>\n   <td style=\"text-align:left;\"> R markdown - like markdown but can include R \n                              code </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .JSON </td>\n   <td style=\"text-align:left;\"> JavaScript Object Notation - commonly used for \n                              transmitting data in web applications using \n                              attribute-value pairs. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .tex </td>\n   <td style=\"text-align:left;\"> TeX - a typesetting langauge especially where \n                              the writer needs precise spacing and/or unusual \n                              fonts and characters such as in maths, linguistics\n                              and musi </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .qmd </td>\n   <td style=\"text-align:left;\"> Quarto markdown - next-generation version of R \n                              Markdown designed to work with *any* programming \n                              langauge. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nSome common markup file extensions and the content the extension usually indicates\n\n:::\n\n## The relationship between file extensions and programs\n\nWhilst a file extension is intended to indicate the content and format,\nit is important to remember a few things. The extension is just part of\nthe name and it is certainly possible to called a file `myfile.csv`\nwithout its contents being formatted as comma-separated values. Programs\nvary in their behaviour to file extensions. Most text editors will\nattempt to open any file regardless of the extension and make it\npossible to save a file with any extension. In program like MS Word you\ncannot save a Word format file with any extension other than `.docx`,\nyou can only save it in another format to change the extension. Some\nprograms will not open fies with a the wrong extension even if the\ncontents are in the correct format.\n\n## File systems\n\nIn a file system, the files are organised into directories. Directory is\nthe old word for what many now call a folder but commands that act on\nfolders in most programming languages and environments reflect this\nhistory\n\nFor example, all of these mean \"tell me my working directory\":\n\n-   `getwd()` **get** **w**orking **d**irectory in R\n-   `pwd` **p**rint **w**orking **d**irectory on Linux\n-   `os.getcwd()` **get** **c**urrent **w**orking **d**irectory in\n    Python\n\nConsequently it is common to use the the word directory in scientific\ncomputing.\n\nFolders can contain sub-folders, which can contain their own\nsub-folders, and so on almost without limit.\n\nIt is easiest to picture a file system, or part of it, as a tree that\nstarts at a directory and branches out from there. This is called a\nhierarchical structure. @fig-file-system shows an example of a\nhierarchical file structure that starts at a directory called `home`:\n\n::: {#fig-file-system}\n\n\n![.](images/file-system.png)\n\n**A file hierarchy containing 4 levels of folders and files.** At the \ntop level there is a directory called `home/`; Inside `home/` are two \ndirectories (`docs/` and `programs/`) and two files `doc1.txt` and \n`image.jpg`. Inside `docs/` there is a file called `doc2.txt` and a \ndirectory called `data/` which contains `doc3.txt` and `doc4.txt`. \nInside `programs/` are three `.exe` files.\nFigure adapted from [@randemma2022]\n:::\n\n## Using a file manager\n\nFile managers are the basic way that you interact with the file system\non your computer. They allows you to move, copy, and delete files. You\ncan also launch applications from them and and connect to other\nnetworks. The windows file explorer is called File Explorer and on Mac\nit is called Finder (@fig-explorer-icons).\n\n::: {#fig-explorer-icons layout-ncol=\"2\"}\n![File Explorer Icon\n(Windows)](images/icon-file-explorer-windows.png){#fig-windows-explorer\nwidth=\"100\"}\n\n![Finder Icon\n(Mac)](images/icon-finder-mac.png){#fig-mac-finder\nwidth=\"100\"}\n\n**File manager programs in Windows and Mac**\n:::\n\nWindows Explorer and Mac Finder do not show the file extensions on file\nnames by default but I find it helpful to be able to see them. You can\nshow the file extensions like this:\n\n-   under View, in the Show/hide group, select the \"File name\n    extensions\" check box @fig-show-extensions-windows\n\n-   choose Finder \\| Preferences \\| Advanced then check \"Show all\n    filename extensions\" box @fig-show-extensions-mac\n\n::: {#fig-show-extensions layout-nrow=\"2\"}\n![Windows](images/show-extensions-windows.png){#fig-show-extensions-windows}\n\n![Mac](images/show-extensions-mac.png){#fig-show-extensions-mac}\n\n**Showing file extensions in Windows and Mac.** \n@fig-show-extensions-windows In Windows, open Windows Explorer. Under \nView, in the Show/hide group, select the \"File name extensions\" check \nbox.  @fig-show-extensions-mac In Mac, choose Finder \\| Preferences \n\\| Advanced then check \"Show all filename extensions\" box.\n\n:::\n\n## Root and home directories\n\nThe top-level of directory on a computer system is known as the \"root\ndirectory\". The root is represented as a `/` in Mac and Linux operating\nsystems. In Windows the root directory is also known as a drive. In most\ncases, this will be the `C:\\` drive.\n\nEven though the root directory is at the base of the file tree (or the\ntop, depending on how you view it), it is not necessarily where our\njourney through the file system starts when we launch a new session on\nour computer. Instead our journey begins in the so called \"home\ndirectory\". You home directory is not usually named `home` but with your\nusername for that computer. Your personal files and directories can be\nfound inside this folder. This is where your computer assumes you want\nto start when you open your file manager. On Windows and Mac your home\ndirectory is a directory *inside* the directory called `Users`\nimmediately under the root and named with your username\n(@fig-file-system-root).\n\n::: {#fig-file-system-root}\n\n![](images/file-system-root.png)\n\n**The hierarchy of a file system from the root**. The top level is `C:\\` \nin Windows and `/` in Mac. Below that is the Users directory which \nhas a folder for each user. Your home directory is named with your \nusername inside the Users folder. Figure adapted from\n[@randemma2022].\n\n:::\n\nThere will be other folders immediately below the root directory (on the\nsame level of the hierarchy as `Users`). These contain system-level\nfiles and folders that you do not usually needed to open, edit or move.\nFor example, `Program Files` is where programs are installed.\n\n## Working directories\n\nThe working directory of a program is the default location a program is\nusing. It is where the program will read and write files by default. You\nhave only one working directory at a time. The terms 'working\ndirectory', 'current working directory' and 'current directory' all mean\nthe same thing.\n\n## File Paths\n\nA path gives the address - or location - of a filesystem object, such as\na file or directory. Paths appear in the address bar of your browser or\nfile manager. We need to know a file path whenever we want to read,\nwrite or refer to a file using code rather than interactively pointing\nand clicking to navigate. In a file path, each directory is represented\nas a separate component separated by a backslash`\\`  or a forward slash\n`/`. Most systems use forward slashes but Windows uses\nbackslashes[^file_systems-1] to separate path components and that is how\nthe path will appear in the address bar of Windows Explorer. However, in\nR you can use paths with forward slashes even on windows.\n\n[^file_systems-1]: Windows uses backslashes because it did not have\n    directories in 1981 when it's predecessor, MS DOS, was released. At\n    the time it used the `/` character for 'switches' (instead of the\n    existing convention `-` ) so when it did start using directories it\n    couldn't use `/`\n\nA path can be **absolute** or **relative** depending on the starting\npoint.\n\n### Absolute paths\n\nAn Absolute path contains the complete list of directories needed to\nlocate a file on your computer from the root. For example, the absolute\npath for the file called `doc3.txt` in the file system above would be\n`/Users/user1/docs/data/doc3.txt` on Mac and\n`C:\\Users\\user1\\docs\\data\\doc3.txt` on Windows. In R, even on Windows,\nit can be given as `C:/Users/user1/docs/data/doc3.txt`\n\n## Relative paths\n\nA relative path gives the location of a filesystem object *relative* to\nthe working directory. Whenever the file you want to reference is in the\nworking directory you can use just its name but if it is in a different\nfolder you need to give the relative path. Some examples:\n\n-   if your working directory was `docs`, the relative path for\n    `doc3.txt` would be `data/doc3.txt`.\n\n-   if your working directory was `docs` the relative path for `abe.exe`\n    files would be `../programs/abe.exe`.\n\n`../` allows you to look in the directory above the working directory\nand `../..` allows you to look in the directory two levels above the\nworking directory and so on.\n\n🎬 Your turn! Use the file system above to answer these questions.\n\n-   What is the absolute path for the document`doc4.txt` on a Mac\n    computer?\n\n-   What is the absolute path for the document `doc4.txt` on a Windows\n    computer?\n\n-   Assuming your working directory is `docs`, what is the relative path\n    for the document `doc2.txt`?\n\n-   Assuming your working directory is `data`, what is the relative path\n    for the document `doc2.txt`?\n\n::: {.callout-tip collapse=\"true\"}\n## 📖\n\n-   `/Users/user1/docs/data/doc4.txt`\n\n-   `C:/Users/user1/docs/data/doc4.txt`\n\n-   `doc2.txt`\n\n-   `../doc2.txt`?\n:::\n\nMost of the time you should use relative paths because that makes your\nwork portable. You only need to use absolute paths when you are\nreferring to filesystem outside the one you are using.\n\n## Save files from the internet\n\nFiles downloaded from the internet go to a folder called `Downloads` by\ndefault on many browsers. This is annoying when you often want to place\na file in a particular folder. I recommend you change this behaviour.\n\n-   Chrome Go to <chrome://settings/downloads> and turn on \"Ask where to\n    save each file before downloading\"\n\n-   Safari Go into Preferences and under General you can change\n    \"Downloads\" to \"Ask for each download\"\n\n## Summary\n\n1.  A file system consists of files and folders organized\n    hierarchically. It is crucial to comprehend different file types,\n    navigate the computer's file system, and effectively organize and\n    manipulate files.\n\n2.  Plain text files, also known as ASCII files, contain only text\n    characters without formatting, images, or colors. They have various\n    extensions, such as `.txt`, `.tab`, `.csv`, `.R`, `.py`, .fasta, and\n    others.\n\n3.  While file extensions are intended to indicate content and format,\n    it's important to remember that programs may behave differently with\n    file extensions. Most text editors will attempt to open any file\n    regardless of the extension, but some programs may only open files\n    with the correct extension.\n\n4.  A directory is a folder\n\n5.  In a file system, files are organized into directories. Directories\n    can contain sub-directories, creating a hierarchical structure. The\n    top-level directory is known as the root directory.\n\n6.  File managers, such as File Explorer in Windows and Finder in Mac,\n    are used to interact with the file system.\n\n7.  The working directory of a program is the default location where\n    files are read from or written to. It is important to understand\n    working directories when referencing files in code.\n\n8.  File paths provide the address or location of a file or directory in\n    the file system. Paths can be absolute or relative. Absolute paths\n    contain the complete list of directories from the root, while\n    relative paths are based on the working directory.\n\n9.  Using relative paths is recommended for portability, as it allows\n    files to be referenced relative to the working directory.\n",
    "supporting": [
      "file_systems_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}