[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Analysis for Bioscientists",
    "section": "",
    "text": "front page stuff"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "\n1  About this book\n",
    "section": "",
    "text": "bioscience\nundergrads\nIt is in sections\npart 1 what they forgot to teach you\nfocus on what causes problems for people learning to code.\npart 2 Getting started with data. give summary\npart 3 Data Analysis, improve name, give summary (babs 2)\nWhen you see.. Try to answer before looking at the code\nYour turn! Assign the value of 4 to a variable called y:\n\nCodey <- 4\n\n\nconventions used in this book"
  },
  {
    "objectID": "what_they_forgot.html",
    "href": "what_they_forgot.html",
    "title": "What they forgot to teach you about computers",
    "section": "",
    "text": "give a summary of contents"
  },
  {
    "objectID": "operating_systems.html#types-of-operating-system",
    "href": "operating_systems.html#types-of-operating-system",
    "title": "2  Operating Systems",
    "section": "2.2 types of operating system",
    "text": "2.2 types of operating system\ninclude windows, mac, unix, tablets, android, apple"
  },
  {
    "objectID": "operating_systems.html#differences-in-how-you-use-them",
    "href": "operating_systems.html#differences-in-how-you-use-them",
    "title": "2  Operating Systems",
    "section": "2.3 differences in how you use them",
    "text": "2.3 differences in how you use them\nkeyboard keys and characters\nFor RStudio, the section on Keyboard Shortcuts and tips willhelp.\n\nenter / return\ncontrol / command\nalt / option\n\nFinder and Explorer\ninstalling software"
  },
  {
    "objectID": "file_systems.html",
    "href": "file_systems.html",
    "title": "3  Understanding file systems",
    "section": "",
    "text": "name - the base name of the file\nextension that should indicate the format or content of the file.\n\nSome examples are report.doc, analysis.R, culture.csv and readme.txt. The relationship between the file extension and the file type\nOne of the simplest types of file is a “text file” which contains text characters without formatting such as bold or italics and no images or colours. Plain text files can be opened in any text editor like Windows Notepad or Mac’s TextEdit.\nData is commonly held in text files because they can be read by many programs\nfiles of file plain text, markup and markdown\nfile extensions\nthe relationship between file extensions and programs\nA file system contains files and folders\nfiles systems are hierarchical\n\n\n\nA file hierarchy containing 4 levels of folders and files\n\n\nfolder is a directory getwd(), dir() in R, cd, pwd in unix, os.getcwd() in Python\nusing a file explorer, showing file extensions\nPaths\nroot directory\ntypical structure on windows and mac\nWorking directory\nRelative and absolute paths"
  },
  {
    "objectID": "organising_work.html",
    "href": "organising_work.html",
    "title": "4  Organising your work",
    "section": "",
    "text": "naming things\nconsistency"
  },
  {
    "objectID": "getting_started_with_data.html",
    "href": "getting_started_with_data.html",
    "title": "Getting started with data",
    "section": "",
    "text": "summary of the chapters\ngeneral ideas about data and data types\nfirst steps with rstudio\nworking with data in RStudio"
  },
  {
    "objectID": "ideas_about_data.html",
    "href": "ideas_about_data.html",
    "title": "5  Ideas about data",
    "section": "",
    "text": "ideas about data - data types, types of variables, - distributions - the normal distribution - summarising, one variable, several variables - role in analysis - plot variables, one, two - tidy data"
  },
  {
    "objectID": "ideas_about_data.html#types-of-data",
    "href": "ideas_about_data.html#types-of-data",
    "title": "5  Ideas about data",
    "section": "5.1 Types of data",
    "text": "5.1 Types of data\nvariables\n\n5.1.1 Continuous data\n\n\n5.1.2 Discrete data\n\n5.1.2.1 Counts\n\n\n5.1.2.2 Nominal and Ordinal"
  },
  {
    "objectID": "ideas_about_data.html#distributions",
    "href": "ideas_about_data.html#distributions",
    "title": "5  Ideas about data",
    "section": "5.2 Distributions",
    "text": "5.2 Distributions\nthe normal distribution\n\nsummarising, one variable, several variables - role in analysis - plot variables, one, two - tidy data"
  },
  {
    "objectID": "ideas_about_data.html#the-role-of-variables-in-analysis",
    "href": "ideas_about_data.html#the-role-of-variables-in-analysis",
    "title": "5  Ideas about data",
    "section": "5.3 The role of variables in analysis",
    "text": "5.3 The role of variables in analysis\nresponse and explanatory"
  },
  {
    "objectID": "first_steps_rstudio.html",
    "href": "first_steps_rstudio.html",
    "title": "\n6  First Steps in RStudio\n",
    "section": "",
    "text": "what is R and Rstudio. Installing them\nintro to rstudio, scripts\ndata types and data structures, project oriented workflow\nusing the help\nYour first plot!"
  },
  {
    "objectID": "first_steps_rstudio.html#what-are-r-and-rstudio",
    "href": "first_steps_rstudio.html#what-are-r-and-rstudio",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.1 What are R and Rstudio?",
    "text": "6.1 What are R and Rstudio?"
  },
  {
    "objectID": "first_steps_rstudio.html#installing-r-and-rstudio",
    "href": "first_steps_rstudio.html#installing-r-and-rstudio",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.2 Installing R and Rstudio",
    "text": "6.2 Installing R and Rstudio"
  },
  {
    "objectID": "first_steps_rstudio.html#introduction-to-rstudio",
    "href": "first_steps_rstudio.html#introduction-to-rstudio",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.3 Introduction to RStudio",
    "text": "6.3 Introduction to RStudio\nIn this section we will introduce you to working in RStudio. We will explain the windows that you see when you first open RStudio and how to change its appearance to suit you. Then we will see how we use R as a calculator and how assign values to R objects.\n\n6.3.1 Changing the appearance\nWhen you first open RStudio it will display three panes and have a white background Figure 6.1\n\n\nFigure 6.1: When you first open RStudio it will be white with three panes\n\n\nWe will talk more about these three panes soon but first, let’s get into character - the character of a programmer! You might have noticed that people comfortable around computers are often using dark backgrounds. A dark background reduces eye strain and often makes “code syntax” more obvious making it faster to learn and understand at a glance. Code syntax is the set of rules that define what the various combinations of symbols mean. It takes time to learn these rules and you will learn best by repeated exposure to writing, reading and copying code. You have done this before when you learned your first spoken language. All languages have syntax rules governing the order of words and we rarely think about these consciously, instead relying on what sounds and looks right. And what sounds and looks right grows out repeated exposure. For example, 35% of languages, including English, Chinese, Yoruba and Polish use the Subject-Verb-Object syntax rule:\n\nEnglish: Emma likes R\nChinese: 艾玛喜欢R Emma xǐhuān R\nYoruba: Emma fẹran R\nPolish: Emma lubi R\n\nand 40% use Subject-Object-Verb including Turkish and Korean\n\nTurkish: Emma R’yi seviyor\nKorean: 엠마는 R을 좋아한다 emmaneun Reul joh-ahanda\n\nYou learned this rule in your language very early, long before you were conscious of it, just by being exposed to it frequently. In this book I try to tell you the syntax rules, but you will learn most from looking at, and copying code. Because of this, it is well worth tinkering with the appearance of RStudio to see what Editor theme makes code elements most obvious to you.\nThere is a tool bar at the top of RStudio. Choose the Tools option and then Global options. This will open a window where many options can be changed Figure 6.2.\n\n\nFigure 6.2: Tools | Global Options opens a window. One of the options is Appearance\n\n\nGo to the Appearance Options and choose and Editor theme you like, followed by OK.\nThe default theme is Textmate. You will notice that all the Editor themes have syntax highlighting so that keywords, variable names, operators, etc are coloured but some themes have stronger contrasts than others. For beginners, I recommend Vibrant Ink, Chaos or Merbivore rather than Dreamweaver or Gob which have little contrast between some elements. However, individuals differ so experiment for yourself. I tend to vary between Solarised light and dark.\nYou can also turn one Screen Reader Support in the Accessibility Options in Tools | Global Options.\nBack to the Panes. You should be looking at three windows: One on the left and two on the right1.\nThe window on the left, labelled Console, is where R commands are executed. In a moment we will start by typing commands in this window. Over on the right hand side, at the top, have several tabs, with the Environment tab showing. This is where all the objects and data that you create will be listed. Behind the Environment tab is the History and later you will be able to view this to see a history of all your commands.\nOn the bottom right hand side, we have a tab called Plots which is where your plots will go, a tab called Files which is a file explorer just like Windows Explorer or Mac Finder, and a Packages tab where you can see all the packages that are installed. The Packages tab also provides a way to install additional packages. The Help tab has access to all the manual pages.\nRight, let’s start coding!\n\n6.3.2 Your first piece of code\nWe can use R just like a calculator. Put your cursor after the > in the Console, type 3 + 4 and ↵ Enter to send that command:\n\n3+4\n\n[1] 7\n\n\nThe > is called the “prompt”. You do not have to type it, it tells you that R is ready for input.\nWhere I’ve written 3+4, I have no spaces. However, you can have spaces, and in fact, it’s good practice to use spaces around your operators because it makes your code easier to read. So a better way of writing this would be:\n\n3 + 4\n\n[1] 7\n\n\nIn the output we have the number 7, which, obviously, is the answer. From now on, you should assume commands typed at the console should be followed by ↵ Enter to send them.\nThe one in brackets, [1], is an index. It is telling you that the 7 is the first element of the output. We can see this more clear if we create something with more output. For example, 50:100 will print the numbers from 50 to 100.\n\n50:100\n\n [1]  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68\n[20]  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87\n[39]  88  89  90  91  92  93  94  95  96  97  98  99 100\n\n\nThe numbers in the square brackets at the beginning of the line give you the index of the first element in the line. R is telling you where you are in the output.\n\n6.3.3 Assigning variables\nVery often we want to keep input values or output for future use. We do this with ‘assignment’ An assignment is a statement in programming that is used to set a value to a variable name. In R, the operator used to do assignment is <-. It assigns the value on the right-hand to the value on the left-hand side.\nTo assign the value 3 to x we do:\n\nx <- 3\n\nand ↵ Enter to send that command.\nThe assignment operator is made of two characters, the < and the - and there is a keyboard short cut: Alt+- (windows) or Option+- (Mac). Using the shortcut means you’ll automatically get spaces. You won’t see any output when the command has been executed because there is no output. However, you will see x listed under Values in the Environment tab (top right).\nYour turn! Assign the value of 4 to a variable called y:\n\nCodey <- 4\n\n\nCheck you can see y listed in the Environment tab.\nWe can use these values in calculations just like we could in in maths and algebra.\n\nx + y\n\n[1] 7\n\n\nWe get the output of 7 just as we expect. Suppose we make a mistake when typing, for example, accidentally pressing the u button instead of the y button:\n\nx + u\n\nError in eval(expr, envir, enclos): object 'u' not found\n\n\nWe get an error. We will probably see this error quite often - it means we have tried to use a variable that is not in our Environment. So when you get that error, have a quick look up at your environment2.\nWe made a typo and will want to try again. We usefully have access to all the commands that previously entered when we use the ↑ Up Arrow. This is known as command recall. Pressing the ↑ Up Arrow once recalls the last command; pressing it twice recalls the command before the last one and so on.\nRecall the x + u command (you may need to use the ↓ Down Arrow to get back to get it) and use the Back space key to remove the u and then add a y.\nA lot of what we type is going to be wrong - that is not because you are a beginner, it is same for everybody! On the whole, you type it wrong until you get it right and then you move to the next part. This means you are going to have to access your previous commands often. The History - behind the Environment tab - contains everything you can see with the ↑ Up Arrow. You can imagine that as you increase the number of commands you run in a session, having access the this record of everything you did is useful. However, the thing about the history is, that it has everything you typed, including all the wrong things!\nWhat we really want is a record of everything we did that was right! This is why we use scripts instead of typing directly into the console.\n\n6.3.4 Using Scripts\nAn R script is a plain text file with a .R extension and containing R code. Instead of typing into the console, we normally type into a script and then send the commands to the console when we are ready to run them. Then if we’ve made any mistakes, we just correct our script and by the end of the session, it contains a record of everything we typed that worked.\nYou have several options open a new script:\n\nbutton: Green circle with a white cross, top left and choose R Script\nmenu: File | New File | R Script\nkeyboard shortcut: Ctrl+Shift+N (Windows) / Shift+Command+N (Mac)\n\nOpen a script and add the two assignments to it:\n\nx <- 3\ny <- 4\n\nTo send the first line to the console, we place our cursor on the line (anywhere) and press Ctrl-Enter (Windows) / Command-Return. That line will be executed in the console and in the script, our cursor will jump to the next line. Now, send the second command to the console in the same way.\nFrom this point forward, you should assume commands should be typed into the script and sent to the console.\nAdd the incorrect command attempting to sum the two variables:\n\nx + u\n\nError in eval(expr, envir, enclos): object 'u' not found\n\n\nTo correct this, we do not add another line to the script but instead edit the existing command:\n\nx + y\n\n[1] 7\n\n\nIn addition to making it easy to keep a record of your work, scripts have another big advantage, you can include ‘comments’ - pieces of text that describe what the code is doing. Comments are indicated with a # in front of them. You can write anything you like after a # and R will recognise that it is not code and doesn’t need to be run.\n\n# This script performs the sum of two values\n\nx <- 3    # can be altered\ny <- 4    # can be altered\n\n# perform sum\nx + y\n\n[1] 7\n\n\nThe comments should be highlighted in a different colour than the code. They will be italic in some Editor themes.\nYou have several options save a script:\n\nbutton: use the floppy disc icon\nmenu: File | Save\nkeyboard shortcut: Ctrl+S (Windows) / Command+S (Mac)\n\nYou could use a name like test1.R - note the .R extension wil be added automatically.\n\n6.3.5 Other types of file in RStudio\n\n\n.R script code but not the objects. You always want to save this\n\n.Rdata also known as the workspace or session, the objects, but not the code. You usually do not want to save this. Some exceptions e.g., if it takes quite a long time to run the commands.\ntext files\n\nI recommend changing some of the default settings to make your life a little easier. Go back into the Global Options window with Tools | Global Options. The top tab is General Figure 6.3.\n\n\nFigure 6.3: Tools | Global Options opens a window. One of the options is General. This where you can change the default behaviour of RStudio. Highlighted is the default (start up) directory and the option to Save and Restore the workspace.\n\n\nFirst, we will set our default working directory. Under ‘Default working directory (when not in a project3):’ click Browse and navigate to a through your file system to a folder where you want to work. You may want to create a folder specifically for studying this book.\nSecond, we will change the Workspace options. Turn off ‘Restore .RData into workspace at startup’ and change ‘Save workspace to .RData on exit’ to ‘Never’. These options mean R will start up clean each time."
  },
  {
    "objectID": "first_steps_rstudio.html#recap-of-rstudio-anatomy",
    "href": "first_steps_rstudio.html#recap-of-rstudio-anatomy",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.4 Recap of RStudio anatomy",
    "text": "6.4 Recap of RStudio anatomy\nThis figure (see Figure 6.44) summarises shows what each of the four RStudio panes and what they are used for to summarise much of what we have covered so far.\n\n\n\n\nFigure 6.4: A screenshot of RStudio’s four panes annotated with what each pane is for."
  },
  {
    "objectID": "first_steps_rstudio.html#data-types-and-structures-in-r",
    "href": "first_steps_rstudio.html#data-types-and-structures-in-r",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.5 Data types and structures in R",
    "text": "6.5 Data types and structures in R\nIn this section, I’m going to introduce you to R’s data types or the ones we’re going to use very often and also some functions and how R functions are used.\nThese are not all the R data types and structures but it is a subset you can get along way with\nWe are going to consider\n\ntypes of value also known as data types\nfunctions\ndata structures\n\n\n6.5.1 Data types\nThis refers to the type of value that something is. They might be numbers or or ‘logical’ (either true of false). We assign a number, like the value of 23 to a variable called x like this:\n\nx <- 23\n\nWe do not need to use quotes for numbers but we do need to use them for characters. We assign the word banana to the variable a like this:\n\na <- \"banana\"\n\nThis because R wouldn’t know whether you were referring to a value or a existing object called banana. This is why you can’t have variable name like 14 - R would not be able to tell the difference between the number 14 and an object named 14.\nAll words, including single characters, need to have quotes around them. You can even force a number to be a character by putting quotes around it:\n\nb <- \"23\"\n\nNotice that things inside quotes appear in a different colour (the colour will depend on the Editor theme your chose). This will help you identify when you have forgotten some closing quotes5:\n\na <- \"banana\nx <- 23\n\nWe also have these special values that are called logicals, and that’s something that is a true or false.\n\nc <- TRUE\n\nTRUE. Now, what you can see there, although this is word, is actually a special word in R. Not quotes needed\nSo that’s why it’s come out a different colour.\nYou can see the variable c has the value TRUE. It also could have the value FALSE.\n\nc <- FALSE\n\nAs you type false, the colour changes as it recognises the special word FALSE. Pay attention to the editor theme’s colouring - it is trying to help you\n\n6.5.2 Functions\nThe aim of this section is to help you understand the logic of using a function. can’t introduction all the functions\nIt has a function name and then a set of brackets. The function names typically minimally explain what the function does. What goes inside the brackets are called arguments. When coding we often talk about passing arguments to functions.\nfunction_name(argument)\nA function can take zero to many arguments. where you give several arguments, they are separated by comments\nfunction_name(argument1, argument2, argument3)\ngetwd() no arguments\nThe first function you are going to use function str(), for structure.\n\nstr(x)\n\n num 23\n\n\nIt’s telling me that x is a number.\nYour turn! Use str() on b:\n\nCodestr(b)\n\n chr \"23\"\n\n\nstr() is a function I use a lot to check what sort of R object I have.\nThese are like single values we’ve got here, and often because we work on the data, we’ve actually got collections of values, so whole rows or whole columns of numbers that all pertain to the same thing.\n\n6.5.3 Data structures: vectors\nLet’s say it could be 10 heights, for example, and you’re going to want to collect those numbers together into a data structure. And the minimal data structure is called a vector.\nSo I can create a vector, which collects together several numbers using a , function, c()\nAnd this is one of the only functions in R which has a single letter. And because it has a single letter, sometimes people get confused about it but it is just a function. Just like str() is a function. It has a function name and then a set of brackets.\nTo create a vector called vect of several numbers we use\n\nvect <- c(23, 42, 7, 9, 54, 2)\n\na data piece called “vect”, which is actually a vector. And it has you can see six numbers in it. And then it’s also telling you that there are six elements or that the indices go from one to six.\n\nstr(vect)\n\n num [1:6] 23 42 7 9 54 2\n\n\nSo it’s numbers. And there’s 6 of them.\nWe can also do vectors of characters. Use the letters of the word banana:\n\nvect_char <- c(\"b\", \"a\", \"n\", \"a\", \"n\", \"a\")\n\nNow, the other feature that helps you a lot is a feature I absolutely love in RStudio is that if you forget quotes or brackets,\nyou can put them around the outside of things very easily. So let’s say I’m going to create a vector of numbers and forgot the function I need to collect together these in brackets.\nSo if I highlight those words and I do the shift and then open bracket instead of overwriting you actually put the brackets around the outside.\nThis is a feature you get to love so much and use so often that it really annoys me when you use other programs overwrite when you wanted to put something in quotes\nSo we could also have vectors of logical values. So previously I just had a single value, false or true.\n\nvect_logic <- c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)\n\nstill need to use the c() function to collect them together. But because these are special words, I don’t need to put quotes around them at all.\nIt’s a special word. So normally we have our data in some kind of structure.\n\n6.5.4 Indexing vectors\nAnd this is the minimal structure of the vector. And if we want to get information out of those vectors, so we only want one value.\nLike the first one. Then we have to index them. So I’m going to index this\nI have to use square brackets. So if we use that and then I open some square brackets, you see the closing brackets open up as well.\nAnd if I use the index of two, that will print out for me the number twelve.\nThere we go. The bottom there’s is number twelve so that the indices start counting from one.\nfootnote unlike Python, if you’re familiar with Python, where you start counting from zero.\nSo that number 23 as the index one. The index to the number 42 index three. And you can index logical factors and character factors in exactly the same way.\nSo if I was to use a word, let’s say I want to get an a out.\nThat’s on the index. Number three.\nSimilarly with the logic groups, as I’ve called it, if I use the index one, it should give me the value.\nTrue. There we go. I’m getting the value true.\nSo this is where you want to select just a single value. Sometimes we want to select more than one value.\nget all the a out So we might want to have the second value. And the fourth value from backed. So if I want the second and the fourth, I’m going to need to give both the second and the fourth index.\nBut I need to collect these together in a sea because I’m trying to give it to things to refer to one.\nIndex. I need to put those two things together That means I want the second and the fourth element. So there I have twelve.\nSo to ensure that both of those are interpreted as for the first dimension, single dimension, then you need to Clairton together with a C.\nSo here we’ve called we’ve selected from vectors using indices, but we could also select from vectors using logical vectors.\nSo if we look at using this vector. Vector here, and I’m gonna select from that using the logic.\nSo if I say that and then you square brackets and give it logic.\nSo what’s inside logic is true, false, false, true.\nSo what that’s gonna do is return twenty three, but not twelve, not 42.\nAnd then it will return 19. So he’s saying which of the values should be returned are the ones where logic evaluates to true.\nThere you go. So I’ve got 23 and 19. The first and the last.\nWell, this is something we use quite often. We may not explicitly make the logic factor,\nbut we may have some condition in here which actually evaluates to logical thing a logical set of logical values like above 20 or something like that.\nSo, for example, I can just do that now, naturally. So if I go that.\nSo if I do that great of fifteen, this is going to return the values, true or false, depending on whether the value in fact is great or less than 50.\nSo there I get true, false, true, true. So if you look at your values here.\nTwelve is the only one under fifteen, so that’s come out as false.\nAnd then you might use that expression to select from your vector.\nSo that would go inside the square brackets\nSo here I am selecting from “vect”, where the value of “vect” is above 15.\nSo that’s selecting for me where everywhere where we have a “true”. So the first, third and fourth values.\nWe have this function here mean(). Which will give you the mean of some values, as you might expect.\nAnd it only works on numbers. This will give the mean of those numbers inside vect\nit is giving me a value of 24 there. If I try and use this function\non “another” or on “word”, both of which are character vectors,\nR is going to complain. There’s the error message:\nNA means it’s not not-applicable. There’s no such value.\nAnd then you get a warning telling you why that’s not worked.\nThis gives me a chance actually to talk a little bit about arguments in functions.\nSo what I’m going to do is I’m going to create a vector which has an additional value in it, which is NA and I have called it “vect2” to. “vect2” contains numbers and NA. It is a special value. It means not applicable. It’s not a zero but a missing value\nSo I let’s run that. I’ve got this vector of it’s numbers,\nR knows its numbers. But this last number doesn’t exist.\nAnd if I try and calculate the mean on this vector\nR is going to complain. You get an NA. So if you try to calculate the mean of a vector of values with an NA in, you’ll get an NA as an answer. mean() has an argument that allows you to cope with that situation, which is one that comes calls up a lot, which is just to exclude the missing values before you calculate the mean.\nIt is called na.rm. And you can see RStudio is trying to help me out here with the with the argument that I want.\nSo I’m going to set na.rm to TRUE. So that means calculate the mean of this vector after removing the missing values\n\n# mean(, na.rm = TRUE)\n\nYou have the function name, open brackets, and then each different argument in the function is separated by commas.\n\n6.5.5 Data structures: dataframes\nSo at the moment, we’ve got values which are in individual vectors, but very often we have data that’s collected together into sets.\nSo you might have several variables or vectors in in a single dataset. And the dataframe is the way we collect those together. And it’s the the most common unit of data in R. It is the data structure that we use all the time.\nAll the statistical functions and plotting functions and so on, use dataframes as inputs.\nAnd we can create a data frame. I’m going to call it “df” and I use this function data.frame().\nAnd then I’m going to give it the variables, “vect” and “word”.\nAnd run it, and now you see that’s come up here above in the global environment as data “df”. And this is a data frame. It’s collected together these vectors. Let me click on that. I can get this spreadsheet like view of that data now.\nSo this is the sort of format that you’re going to see all the time.\nAnd if you want to refer to one of these vectors, they don’t exist except inside data frame.\nTo refer to them, you have to use this dollar notation. df\nthen a dollar and then the name of the variable that you want.\nSo that will print out vect for me.\nc(1:5, 10.5, “next”) [1] “1” “2” “3” “4” “5” “10.5” “next”\n\n6.5.6 tibbles"
  },
  {
    "objectID": "first_steps_rstudio.html#rstudio-projects",
    "href": "first_steps_rstudio.html#rstudio-projects",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.6 RStudio Projects",
    "text": "6.6 RStudio Projects\n\n\n.RProj indicates a folder is an RStudio Project"
  },
  {
    "objectID": "first_steps_rstudio.html#installing-packages",
    "href": "first_steps_rstudio.html#installing-packages",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.7 Installing packages",
    "text": "6.7 Installing packages"
  },
  {
    "objectID": "first_steps_rstudio.html#your-first-graph",
    "href": "first_steps_rstudio.html#your-first-graph",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.8 Your first graph",
    "text": "6.8 Your first graph\nvery simple ggplot, geom point scatter"
  },
  {
    "objectID": "first_steps_rstudio.html#summary",
    "href": "first_steps_rstudio.html#summary",
    "title": "\n6  First Steps in RStudio\n",
    "section": "\n6.9 Summary",
    "text": "6.9 Summary"
  },
  {
    "objectID": "working_with_data_rstudio.html",
    "href": "working_with_data_rstudio.html",
    "title": "7  Working with data in RStudio",
    "section": "",
    "text": "-   importing data, types of file, different methds\n-   summarising data, one two,\n-   More plots\n-   saving plots\n-   tidying data"
  },
  {
    "objectID": "working_with_data_rstudio.html#summarising-data",
    "href": "working_with_data_rstudio.html#summarising-data",
    "title": "7  Working with data in RStudio",
    "section": "7.1 Summarising data",
    "text": "7.1 Summarising data\nconcepts: mean, median, mode, standard deviation, sample distribution of the mean, standard error\nthe role of data types in the type of summary"
  },
  {
    "objectID": "working_with_data_rstudio.html#summarising-and-plotting-a-single-variable",
    "href": "working_with_data_rstudio.html#summarising-and-plotting-a-single-variable",
    "title": "7  Working with data in RStudio",
    "section": "7.2 Summarising and plotting a single variable",
    "text": "7.2 Summarising and plotting a single variable\nnormal distribution, mean, sd, se, n, histogram categories mode, counts, barchart,\nusing the help Your first plot! importing data, types of file, different methds summarising data, one two, More plots saving plots tidying data"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "keyboard-shortcuts-tips.html",
    "href": "keyboard-shortcuts-tips.html",
    "title": "9  Keyboard short cuts and other tips",
    "section": "",
    "text": "Alt+Shift+K"
  }
]