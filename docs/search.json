[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Analysis for Bioscientists",
    "section": "",
    "text": "Welcome!\nfront page stuff"
  },
  {
    "objectID": "intro.html#who-is-this-book-for",
    "href": "intro.html#who-is-this-book-for",
    "title": "\n1¬† About this book\n",
    "section": "\n1.1 Who is this book for?",
    "text": "1.1 Who is this book for?\nbioscience\nundergrads"
  },
  {
    "objectID": "intro.html#about-the-content",
    "href": "intro.html#about-the-content",
    "title": "\n1¬† About this book\n",
    "section": "\n1.2 About the content",
    "text": "1.2 About the content\nIt is in sections\npart 1 what they forgot to teach you\nfocus on what causes problems for people learning to code.\npart 2 Getting started with data. give summary\npart 3 Data Analysis, improve name, give summary (babs 2)"
  },
  {
    "objectID": "intro.html#your-turn",
    "href": "intro.html#your-turn",
    "title": "\n1¬† About this book\n",
    "section": "\n1.3 Your turn!",
    "text": "1.3 Your turn!\nWhen you see.. Try to answer before looking at the code\nüé¨ Your turn! Assign the value of 4 to a variable called y:\n\nCodey &lt;- 4\n\n\nconventions used in this book"
  },
  {
    "objectID": "intro.html#commenting",
    "href": "intro.html#commenting",
    "title": "\n1¬† About this book\n",
    "section": "\n1.4 Commenting",
    "text": "1.4 Commenting\nThis page has commenting with Hypothes.is enabled\nmake a private group https://web.hypothes.is/help/annotating-with-groups/"
  },
  {
    "objectID": "intro.html#code-of-conduct-for-commenting",
    "href": "intro.html#code-of-conduct-for-commenting",
    "title": "\n1¬† About this book\n",
    "section": "\n1.5 Code of Conduct for commenting",
    "text": "1.5 Code of Conduct for commenting"
  },
  {
    "objectID": "what_they_forgot.html",
    "href": "what_they_forgot.html",
    "title": "What they forgot to teach you about computers",
    "section": "",
    "text": "Important\n\n\n\nYou are reading a work in progress. This page is a dumping ground for ideas and not really readable..\n\n\nWhy this part\ngive a summary of contents"
  },
  {
    "objectID": "operating_systems.html#what-is-an-operating-system",
    "href": "operating_systems.html#what-is-an-operating-system",
    "title": "\n2¬† Operating Systems\n",
    "section": "\n2.1 what is an operating system",
    "text": "2.1 what is an operating system"
  },
  {
    "objectID": "operating_systems.html#types-of-operating-system",
    "href": "operating_systems.html#types-of-operating-system",
    "title": "\n2¬† Operating Systems\n",
    "section": "\n2.2 types of operating system",
    "text": "2.2 types of operating system\ninclude windows, mac, unix, tablets, android, apple"
  },
  {
    "objectID": "operating_systems.html#differences-in-how-you-use-them",
    "href": "operating_systems.html#differences-in-how-you-use-them",
    "title": "\n2¬† Operating Systems\n",
    "section": "\n2.3 differences in how you use them",
    "text": "2.3 differences in how you use them\nkeyboard keys and characters\nFor RStudio, the section on Keyboard Shortcuts and tips willhelp.\n\nenter / return\ncontrol / command\nalt / option\n\nFinder and Explorer\ninstalling software"
  },
  {
    "objectID": "file_systems.html",
    "href": "file_systems.html",
    "title": "\n3¬† Understanding file systems\n",
    "section": "",
    "text": "Important\n\n\n\nYou are reading a work in progress. This page is a dumping ground for ideas and not really readable..\n\n\nA file is a unit of storage on a computer with a name that uniquely identifies it. Files can be of different types depending on the sort of information held in them. The file name very often consists of two parts, separated by a dot:\n\nname - the base name of the file\nextension that should indicate the format or content of the file.\n\nSome examples are report.doc, analysis.R, culture.csv and readme.txt. The relationship between the file extension and the file type\nOne of the simplest types of file is a ‚Äútext file‚Äù which contains text characters without formatting such as bold or italics and no images or colours. Plain text files can be opened in any text editor like Windows Notepad or Mac‚Äôs TextEdit.\nData is commonly held in text files because they can be read by many programs\nfiles of file plain text, markup and markdown\nfile extensions\nthe relationship between file extensions and programs\nA file system contains files and folders\nfiles systems are hierarchical\n\n\nA file hierarchy containing 4 levels of folders and files\n\nfolder is a directory getwd(), dir() in R, cd, pwd in unix, os.getcwd() in Python\nusing a file explorer, showing file extensions\nPaths\nroot directory\ntypical structure on windows and mac\nWorking directory\nRelative and absolute paths\nsave files fromthe internet chrome://settings/downloads"
  },
  {
    "objectID": "organising_work.html",
    "href": "organising_work.html",
    "title": "\n4¬† Organising your work\n",
    "section": "",
    "text": "Important\n\n\n\nYou are reading a work in progress. This page is a dumping ground for ideas and not really readable..\n\n\nuse folder\nconsistency\nnaming things"
  },
  {
    "objectID": "getting_started_with_data.html",
    "href": "getting_started_with_data.html",
    "title": "Getting started with data",
    "section": "",
    "text": "Important\n\n\n\nYou are reading a work in progress. This page is a dumping ground for ideas and not really readable..\n\n\nwhy this part\nsummary of the chapters\ngeneral ideas about data and data types\nfirst steps with rstudio\nworking with data in RStudio"
  },
  {
    "objectID": "ideas_about_data.html#roles-of-variables-in-analysis",
    "href": "ideas_about_data.html#roles-of-variables-in-analysis",
    "title": "\n5¬† Ideas about data\n",
    "section": "\n5.1 Roles of variables in analysis",
    "text": "5.1 Roles of variables in analysis\nWhen we do research, we typically have variables that we choose or set and variables that we measure. The variables we choose or set are called independent or explanatory variables. The variables we measure are called dependent or response variables. For example, we might measure the concentration of enzymes and hormones in blood samples of individuals with different genotypes. The genotype acts as the explanatory variable and the blood measurements are response. We would be interested in whether the blood measures differ between genotypes."
  },
  {
    "objectID": "ideas_about_data.html#distributions",
    "href": "ideas_about_data.html#distributions",
    "title": "\n5¬† Ideas about data\n",
    "section": "\n5.2 Distributions",
    "text": "5.2 Distributions\nThe distribution of a variable describes the types of values it can take and the likelihood of each value occurring. For example, for a variable like human height the values have decimal places and follow a normal distribution also known as the Gaussian distribution or the bell-shaped curve. Values of 1.65 metres occur more often than values of 2 metres and values of 3 metres never occur (Figure¬†5.1).\n\n\n\n\nFigure¬†5.1: Human height follows a normal distribution.\n\n\n\nAn important distinction is between discrete and continuous types of data. Continuous variables are measurements that can take any value in their range. Discrete variables can take only specific values.\n\n5.2.1 Discrete data\nDiscrete variables can take only specific values and can be categories, like genotype, or counts, like the number of petals.\n\n5.2.1.1 Categories: Nominal and Ordinal\nCategorical data can be nominal and ordinal depending on whether they are ordered. Nominal variable have no particular order, for example, the eye colour of Drosophila or the species of bird. When summarising data on bird species, it wouldn‚Äôt matter what order the information was given or plotted. Ordinal variables have an order. The Likert scale Likert (1932) used in questionnaires is one example. The possible responses are Strongly agree, Agree, Disagree and Strongly disagree; these have an order that you would use when plotting them (?fig-categories)\n\n\n\n\n\nFigure¬†5.2: The categories of bird species are unordered - or nominal - but those in a likert variable are ordinal.\n\n\n\n\n\nFigure¬†5.3: The categories of bird species are unordered - or nominal - but those in a likert variable are ordinal.\n\n\n\n\nThe most appropriate way to summarise nominal or ordinal data is to report the most frequent values or tabulate the number of each value (Table¬†5.1).\n\n\n\n\nTable¬†5.1: Frequency of reposnes.\n\nResponse\nFrequency\n\n\n\nStrongly agree\n15\n\n\nAgree\n18\n\n\nDisagree\n10\n\n\nStrongly disagree\n2\n\n\n\n\n\n\n\n\n\n5.2.1.2 Counts\nCounts are one of the most common data types. They are quantitative but discrete because they can take only specific values\n\n5.2.2 Continuous data\nContinuous variables are measurements that can take any value in their range so there are an infinite number of possible values. The values have decimal places. Variables like the length and mass of an organism, the volume and optical density of a solution, or the colour intensity of an image are continuous. Many response variables are continuous but continuous variables can also be explanatory. For example,\n\n5.2.3 The normal distribution\n\n5.2.4 Distribution of counts"
  },
  {
    "objectID": "ideas_about_data.html#theory-and-practice",
    "href": "ideas_about_data.html#theory-and-practice",
    "title": "\n5¬† Ideas about data\n",
    "section": "\n5.3 Theory and practice",
    "text": "5.3 Theory and practice\nThe distinction between continuous and discrete values is clear in theory but in practice, the actual values you have might differ from what we would expect for a particular variable. For example, we would expect the mass of cats to be continuous but if our scales only measure to the nearest kilogram then\n\nm &lt;- 4\nsd &lt;- 0.8\nset.seed(1234)\na &lt;- ggplot(data = data.frame(Mass = c(m - 3 * sd, m + 3 * sd)), aes(Mass)) +\n  stat_function(fun = dnorm, n = 101, \n                args = list(mean = m, sd = sd)) + \n  scale_y_continuous(breaks = NULL, name = \"\", \n                     expand = c(0, 0)) +\n  annotate(\"text\", x = m - 2 * sd, y = 0.4,\n           label = \"Theory\") +\n  theme_classic()\n\nb &lt;- ggplot(data = data.frame(Mass = round(rnorm(1000, m, sd), 0)), aes(Mass)) +\n  geom_histogram(binwidth = 1, colour = \"black\", fill = \"white\") +\n  scale_y_continuous(breaks = NULL, name = \"\",\n                     expand = c(0, 0)) +\n  annotate(\"text\", x = m - 2 * sd, y = 400,\n           label = \"Practice\") +\n  theme_classic()\n\na + b\n\n\n\n\n\nm &lt;- 120000\nsd &lt;- 20000\nset.seed(12)\nggplot() +\n  geom_histogram(data = data.frame(hairs = round(rnorm(60000, m, sd), 0)),\n                 aes(hairs),\n                 bins = 120, colour = \"black\", fill = \"white\") +\n  scale_y_continuous(breaks = NULL, name = \"\",\n                     expand = c(0, 0)) +\n  scale_x_continuous(\"Number of hairs on head\") +\n  theme_classic()\n\n\n\n\n\n\n\n\nLikert, R. 1932. ‚ÄúA Technique for the Measurement of Attitudes.‚Äù Archives of Psychology 22 140: 55‚Äì55."
  },
  {
    "objectID": "first_steps_rstudio.html#what-are-r-and-rstudio",
    "href": "first_steps_rstudio.html#what-are-r-and-rstudio",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.1 What are R and Rstudio?",
    "text": "6.1 What are R and Rstudio?\n\n6.1.1 What is R?\nR is a programming language and environment for statistical computing and graphics which is free and open source. It is widely used in industry and academia. It is what is known as a ‚Äúdomain-specific‚Äù language meaning that it is designed especially for doing data analysis and visualisation rather than a ‚Äúgeneral-purpose‚Äù programming language like Python and C++. It makes doing the sorts of things that bioscientists do a bit easier than in a general purpose-language.\n\n6.1.2 What is RStudio?\nRStudio is what is known as an ‚Äúintegrated development environment‚Äù (IDE) for R made by Posit. IDEs have features that make it easier to do coding like syntax highlighting, code completion and viewers for files, code objects, packages and plots. You don‚Äôt have to use RStudio to use R but it is very helpful.\n\n6.1.3 Why is it better to use R than Excel, googlesheets or some other spreadsheet program?\nSpreadsheet programs are not statistical packages so although you can carry out some analysis tasks in them they are limited, get things wrong (known about since 1994) and teach you bad data habits. Spreadsheets encourage you to do things that are going to make analysis difficult.\n\n6.1.4 Why is it better to use R than SPSS, Minitab or some other menu-driven statistics program?\n\nR is free and open source which it will always be available to you .\nCarrying out data analysis using coding makes everything you do reproducible\nThe skills and expertise you gain through learning R are highly transferable ‚Äì much more so than those acquired using SPSS.\nSee Thomas Mock‚Äôs demonstration of doing some data analysis in R including ‚ÄúThe Kick Ass Curve‚Äù: https://rstudio.com/resources/webinars/a-gentle-introduction-to-tidy-statistics-in-r/\n\nThere are other good options such as Julia and Python and you are encouraged to explore these. We chose R in part because of the R community which is one of R‚Äôs greatest assets, being vibrant, inclusive and supportive of users at all levels. https://ropensci.org/blog/2017/06/23/community/"
  },
  {
    "objectID": "first_steps_rstudio.html#installing-r-and-rstudio",
    "href": "first_steps_rstudio.html#installing-r-and-rstudio",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.2 Installing R and Rstudio",
    "text": "6.2 Installing R and Rstudio\nYou will need to install both R and RStudio to use them on your own machine. Installation is normally straightforward but you can follow a tutorial here: https://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome\n\n6.2.1 Installing R\nGo to https://cloud.r-project.org/ and download the ‚ÄúPrecompiled binary distributions of the base system and contributed packages‚Äù appropriate for your machine.\n\n6.2.1.1 For Windows\nClick ‚ÄúDownload R for Windows‚Äù, then ‚Äúbase‚Äù, then ‚ÄúDownload R 4.#.# for Windows‚Äù. This will download an .exe file. Once downloaded, open (double click) that file to start the installation.\n\n6.2.1.2 For Mac\nClick ‚ÄúDownload R for (Mac) OS X‚Äù, then ‚ÄúR-4.#.#.pkg‚Äù to download the installer. Run the installer to complete installation.\n\n6.2.1.3 For Linux\nClick ‚ÄúDownload R for Linux‚Äù. Instructions on installing are given for Debian, Redhat, Suse and Ubuntu distributions. Where there is a choice, install both r-base and r-base-dev.\n\n6.2.2 Installing R Studio\nGo to https://posit.co/download/rstudio-desktop/"
  },
  {
    "objectID": "first_steps_rstudio.html#install-the-tidyverse-package",
    "href": "first_steps_rstudio.html#install-the-tidyverse-package",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.3 Install the tidyverse package",
    "text": "6.3 Install the tidyverse package\nInstall tidyverse:\n\ninstall.packages(\"tidyverse\")"
  },
  {
    "objectID": "first_steps_rstudio.html#introduction-to-rstudio",
    "href": "first_steps_rstudio.html#introduction-to-rstudio",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.4 Introduction to RStudio",
    "text": "6.4 Introduction to RStudio\nIn this section we will introduce you to working in RStudio. We will explain the windows that you see when you first open RStudio and how to change its appearance to suit you. Then we will see how we use R as a calculator and how assign values to R objects.\n\n6.4.1 Changing the appearance\nWhen you first open RStudio it will display three panes and have a white background Figure¬†6.1\n\n\nFigure¬†6.1: When you first open RStudio it will be white with three panes\n\nWe will talk more about these three panes soon but first, let‚Äôs get into character - the character of a programmer! You might have noticed that people comfortable around computers are often using dark backgrounds. A dark background reduces eye strain and often makes ‚Äúcode syntax‚Äù more obvious making it faster to learn and understand at a glance. Code syntax is the set of rules that define what the various combinations of symbols mean. It takes time to learn these rules and you will learn best by repeated exposure to writing, reading and copying code. You have done this before when you learned your first spoken language. All languages have syntax rules governing the order of words and we rarely think about these consciously, instead relying on what sounds and looks right. And what sounds and looks right grows out repeated exposure. For example, 35% of languages, including English, Chinese, Yoruba and Polish use the Subject-Verb-Object syntax rule:\n\nEnglish: Emma likes R\nChinese: ËâæÁéõÂñúÊ¨¢R Emma x«êhuƒÅn R\nYoruba: Emma f·∫πran R\nPolish: Emma lubi R\n\nand 40% use Subject-Object-Verb including Turkish and Korean\n\nTurkish: Emma R‚Äôyi seviyor\nKorean: Ïó†ÎßàÎäî RÏùÑ Ï¢ãÏïÑÌïúÎã§ emmaneun Reul joh-ahanda\n\nYou learned this rule in your language very early, long before you were conscious of it, just by being exposed to it frequently. In this book I try to tell you the syntax rules, but you will learn most from looking at, and copying code. Because of this, it is well worth tinkering with the appearance of RStudio to see what Editor theme makes code elements most obvious to you.\nThere is a tool bar at the top of RStudio. Choose the Tools option and then Global options. This will open a window where many options can be changed Figure¬†6.2.\n\n\nFigure¬†6.2: Tools | Global Options opens a window. One of the options is Appearance\n\nGo to the Appearance Options and choose and Editor theme you like, followed by OK.\nThe default theme is Textmate. You will notice that all the Editor themes have syntax highlighting so that keywords, variable names, operators, etc are coloured but some themes have stronger contrasts than others. For beginners, I recommend Vibrant Ink, Chaos or Merbivore rather than Dreamweaver or Gob which have little contrast between some elements. However, individuals differ so experiment for yourself. I tend to vary between Solarised light and dark.\nYou can also turn one Screen Reader Support in the Accessibility Options in Tools | Global Options.\nBack to the Panes. You should be looking at three windows: One on the left and two on the right1.\nThe window on the left, labelled Console, is where R commands are executed. In a moment we will start by typing commands in this window. Over on the right hand side, at the top, have several tabs, with the Environment tab showing. This is where all the objects and data that you create will be listed. Behind the Environment tab is the History and later you will be able to view this to see a history of all your commands.\nOn the bottom right hand side, we have a tab called Plots which is where your plots will go, a tab called Files which is a file explorer just like Windows Explorer or Mac Finder, and a Packages tab where you can see all the packages that are installed. The Packages tab also provides a way to install additional packages. The Help tab has access to all the manual pages.\nRight, let‚Äôs start coding!\n\n6.4.2 Your first piece of code\nWe can use R just like a calculator. Put your cursor after the &gt; in the Console, type 3 + 4 and ‚Üµ Enter to send that command:\n\n3+4\n\n[1] 7\n\n\nThe &gt; is called the ‚Äúprompt‚Äù. You do not have to type it, it tells you that R is ready for input.\nWhere I‚Äôve written 3+4, I have no spaces. However, you can have spaces, and in fact, it‚Äôs good practice to use spaces around your operators because it makes your code easier to read. So a better way of writing this would be:\n\n3 + 4\n\n[1] 7\n\n\nIn the output we have the number 7, which, obviously, is the answer. From now on, you should assume commands typed at the console should be followed by ‚Üµ Enter to send them.\nThe one in parentheses, [1], is an index. It is telling you that the 7 is the first element of the output. We can see this more clear if we create something with more output. For example, 50:100 will print the numbers from 50 to 100.\n\n50:100\n\n [1]  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68\n[20]  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87\n[39]  88  89  90  91  92  93  94  95  96  97  98  99 100\n\n\nThe numbers in the square parentheses at the beginning of the line give you the index of the first element in the line. R is telling you where you are in the output.\n\n6.4.3 Assigning variables\nVery often we want to keep input values or output for future use. We do this with ‚Äòassignment‚Äô An assignment is a statement in programming that is used to set a value to a variable name. In R, the operator used to do assignment is &lt;-. It assigns the value on the right-hand to the value on the left-hand side.\nTo assign the value 3 to x we do:\n\nx &lt;- 3\n\nand ‚Üµ Enter to send that command.\nThe assignment operator is made of two characters, the &lt; and the - and there is a keyboard short cut: Alt+- (windows) or Option+- (Mac). Using the shortcut means you‚Äôll automatically get spaces. You won‚Äôt see any output when the command has been executed because there is no output. However, you will see x listed under Values in the Environment tab (top right).\nYour turn! Assign the value of 4 to a variable called y:\n\nCodey &lt;- 4\n\n\nCheck you can see y listed in the Environment tab.\nType x and ‚Üµ Enter to print the contents of x in the console:\n\nx\n\n[1] 3\n\n\nWe can use these values in calculations just like we could in in maths and algebra.\n\nx + y\n\n[1] 7\n\n\nWe get the output of 7 just as we expect. Suppose we make a mistake when typing, for example, accidentally pressing the u button instead of the y button:\n\nx + u\n\nError in eval(expr, envir, enclos): object 'u' not found\n\n\nWe get an error. We will probably see this error quite often - it means we have tried to use a variable that is not in our Environment. So when you get that error, have a quick look up at your environment2.\nWe made a typo and will want to try again. We usefully have access to all the commands that previously entered when we use the ‚Üë Up Arrow. This is known as command recall. Pressing the ‚Üë Up Arrow once recalls the last command; pressing it twice recalls the command before the last one and so on.\nRecall the x + u command (you may need to use the ‚Üì Down Arrow to get back to get it) and use the Back space key to remove the u and then add a y.\nA lot of what we type is going to be wrong - that is not because you are a beginner, it is same for everybody! On the whole, you type it wrong until you get it right and then you move to the next part. This means you are going to have to access your previous commands often. The History - behind the Environment tab - contains everything you can see with the ‚Üë Up Arrow. You can imagine that as you increase the number of commands you run in a session, having access the this record of everything you did is useful. However, the thing about the history is, that it has everything you typed, including all the wrong things!\nWhat we really want is a record of everything we did that was right! This is why we use scripts instead of typing directly into the console.\n\n6.4.4 Using Scripts\nAn R script is a plain text file with a .R extension and containing R code. Instead of typing into the console, we normally type into a script and then send the commands to the console when we are ready to run them. Then if we‚Äôve made any mistakes, we just correct our script and by the end of the session, it contains a record of everything we typed that worked.\nYou have several options open a new script:\n\nbutton: Green circle with a white cross, top left and choose R Script\nmenu: File | New File | R Script\nkeyboard shortcut: Ctrl+Shift+N (Windows) / Shift+Command+N (Mac)\n\nOpen a script and add the two assignments to it:\n\nx &lt;- 3\ny &lt;- 4\n\nTo send the first line to the console, we place our cursor on the line (anywhere) and press Ctrl-Enter (Windows) / Command-Return. That line will be executed in the console and in the script, our cursor will jump to the next line. Now, send the second command to the console in the same way.\nFrom this point forward, you should assume commands should be typed into the script and sent to the console.\nAdd the incorrect command attempting to sum the two variables:\n\nx + u\n\nError in eval(expr, envir, enclos): object 'u' not found\n\n\nTo correct this, we do not add another line to the script but instead edit the existing command:\n\nx + y\n\n[1] 7\n\n\nIn addition to making it easy to keep a record of your work, scripts have another big advantage, you can include ‚Äòcomments‚Äô - pieces of text that describe what the code is doing. Comments are indicated with a # in front of them. You can write anything you like after a # and R will recognise that it is not code and doesn‚Äôt need to be run.\n\n# This script performs the sum of two values\n\nx &lt;- 3    # can be altered\ny &lt;- 4    # can be altered\n\n# perform sum\nx + y\n\n[1] 7\n\n\nThe comments should be highlighted in a different colour than the code. They will be italic in some Editor themes.\nYou have several options save a script:\n\nbutton: use the floppy disc icon\nmenu: File | Save\nkeyboard shortcut: Ctrl+S (Windows) / Command+S (Mac)\n\nYou could use a name like test1.R - note the .R extension wil be added automatically.\n\n6.4.5 Other types of file in RStudio\n\n\n.R script code but not the objects. You always want to save this\n\n.Rdata also known as the workspace or session, the objects, but not the code. You usually do not want to save this. Some exceptions e.g., if it takes quite a long time to run the commands.\ntext files\n\nI recommend changing some of the default settings to make your life a little easier. Go back into the Global Options window with Tools | Global Options. The top tab is General Figure¬†6.3.\n\n\nFigure¬†6.3: Tools | Global Options opens a window. One of the options is General. This where you can change the default behaviour of RStudio. Highlighted is the default (start up) directory and the option to Save and Restore the workspace.\n\nFirst, we will set our default working directory. Under ‚ÄòDefault working directory (when not in a project3):‚Äô click Browse and navigate to a through your file system to a folder where you want to work. You may want to create a folder specifically for studying this book.\nSecond, we will change the Workspace options. Turn off ‚ÄòRestore .RData into workspace at startup‚Äô and change ‚ÄòSave workspace to .RData on exit‚Äô to ‚ÄòNever‚Äô. These options mean R will start up clean each time."
  },
  {
    "objectID": "first_steps_rstudio.html#recap-of-rstudio-anatomy",
    "href": "first_steps_rstudio.html#recap-of-rstudio-anatomy",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.5 Recap of RStudio anatomy",
    "text": "6.5 Recap of RStudio anatomy\nThis figure (see Figure¬†6.44) summarises shows what each of the four RStudio panes and what they are used for to summarise much of what we have covered so far.\n\n\n\n\nFigure¬†6.4: A screenshot of RStudio‚Äôs four panes annotated with what each pane is for."
  },
  {
    "objectID": "first_steps_rstudio.html#data-types-and-structures-in-r",
    "href": "first_steps_rstudio.html#data-types-and-structures-in-r",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.6 Data types and structures in R",
    "text": "6.6 Data types and structures in R\nIn this section, we are going to introduce you to some of R‚Äôs data types and structures. We won‚Äôt be covering all of them now, just those you are going to use often in this part of the book. These are numerics (numbers), characters, ‚Äòlogicals‚Äô, vectors and dataframes. We can do a lot with just these. We will also cover using functions.\nWe are going to consider\n\ntypes of value also known as data types\nfunctions\ndata structures\n\n\n6.6.1 Data types\nThis refers to the type of value that something is. They might be numerics or characters or ‚Äòlogical‚Äô (either true of false). We assign a number, like the value of 23 to a variable called x like this:\n\nx &lt;- 23\nx\n\n[1] 23\n\n\nWe do not need to use quotes for numbers but we do need to use them for characters and can assign the word banana to the variable a like this:\n\na &lt;- \"banana\"\na\n\n[1] \"banana\"\n\n\nQuotes are needed because otherwise R wouldn‚Äôt know whether you were referring to a value or a existing object called banana. This is also why you can‚Äôt have variable name like 14 - R would not be able to tell the difference between the number 14 and an object named 14 since numbers and objects don‚Äôt need quotes.\nAnything composed of non-numeric characters, including single characters, need to have quotes around it. You can even force a number to be a character by putting quotes around it:\n\nb &lt;- \"23\"\nb\n\n[1] \"23\"\n\n\nNotice that things inside quotes appear in a different colour (the colour will depend on the Editor theme you choose). This will help you identify when you have forgotten some closing quotes5:\n\na &lt;- \"banana\nx &lt;- 23\n\nAlthough the data type is ‚Äòcharacter‚Äô we often use the term ‚Äòstring‚Äô for collections - strings - of characters\nWe also have special values called ‚Äòlogicals‚Äô which take a value of either TRUE or FALSE.\n\nc &lt;- TRUE\nc\n\n[1] TRUE\n\n\nAlthough TRUE is a word, R recognises it as special word. It appears in a different colour and no quotes are needed. This is the same for FALSE.\n\nc &lt;- FALSE\nc\n\n[1] FALSE\n\n\nAs you type FALSE, the colour changes as it recognises the special word FALSE. Try to pay attention to the editor theme‚Äôs colouring - it is trying to help you!\n\n6.6.2 Functions\nThe aim of this section is to help you understand the logic of using a function. Functions have a name and then a set of parentheses. The function name minimally explains what the function does. Inside the parentheses are ‚Äòarguments‚Äô - the pieces of information you give to the function. When coding, we often talk about passing arguments to functions and calling functions. A simple function call looks like this:\nfunction_name(argument)\nA function can take zero to many arguments. Where you give several arguments, they are separated by commas:\nfunction_name(argument1, argument2, argument3, ...)\nThe first function you are going to use is str() which gives the structure of an object:\n\nstr(x)\n\n num 23\n\n\nIt‚Äôs telling me that x is a number and contains 23.\nYour turn! Use str() on b:\n\nCodestr(b)\n\n chr \"23\"\n\n\nstr() is a function I use a lot to check what sort of R object I have.\nWe must give str() at least one argument, the object we want the structure of, but additional arguments are also possible. Later we will discover how to find out and use a function‚Äôs arguments.\nSo far we our objects have consisted of a single thing but usually we have several bits of data that we want to collect together into a data structure.\n\n6.6.3 Data structures: vectors\nImagine we have the ages of six people. Since all the numbers are ages, we would want to keep them together. The minimal data structure is called a vector. We can create a vector, which collects together several numbers using a function, c(). This is one of only a few functions in R with a single-letter name. Because it has a single letter, sometimes people get confused about it but we can tell it is a function because it has a set of parentheses.\nTo create a vector called ages of several numbers we use\n\nages &lt;- c(23, 42, 7, 9, 54, 12)\n\nType ages and run if you want to print the contents to the console:\n\nages\n\n[1] 23 42  7  9 54 12\n\n\nUsing str() on ages\n\nstr(ages)\n\n num [1:6] 23 42 7 9 54 12\n\n\ntells us we have numbers with the indices of 1 to 6.\nWe can also create a vector of strings. Suppose we have names to go with the ages.\n\nnames &lt;- c(\"Rowan\", \"Aang\", \"Zain\", \"Charlie\", \"Jules\", \"Efe\")\n\nRStudio has a super useful feature for putting items in quotes, brackets or parentheses if you initially forget them: If you select something and type the opening element, that thing will be surrounded rather than over written. For example, if you had written:\n\nnames &lt;- Rowan, Aang, Zain, Charlie, Jules, Efe\n\nSelect one of the names and then type an opening quote - you should see the name is then surrounded by quotes rather than overwritten. You can repeat this process for all the names (note that double clicking on the name will select it). Selecting the whole list and typing an opening parenthesis will put the whole list in parentheses. This is a feature you get to love so much and use so often that other programs will annoy you when you overwrite something you meant to quote!\nSo we can also have vectors of logical values. For example, we might have a vector that indicates that Rowan, Aang and Charlie like chocolate, but Zain, Jules and Efe do not:\n\nchocolate &lt;- c(TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)\n\nRemember, because TRUE and FALSE are special words so we do not need quote them.\n\n6.6.4 Indexing vectors\nYou might be wondering how to get a single element out of a vector if typing the vector‚Äôs name prints the entire vector. This is by ‚Äòindexing‚Äô. An index is a number from 16 to the length of a vector which gives the position in the vector and is denoted by square brackets. For example, to pull out the second element of ages:\n\nages[2]\n\n[1] 42\n\n\nYour turn! Print the last element of names:\n\nCodenames[6]\n\n[1] \"Efe\"\n\n\nWe an extract more than one element by giving more than one index. If the indices are adjacent like 3rd, 4th and 5th, we have use the colon:\n\nnames[3:5]\n\n[1] \"Zain\"    \"Charlie\" \"Jules\"  \n\n\nIf the indices are not adjacent, like 2 and 6 with need to combine them with c():\n\nnames[c(2, 6)]\n\n[1] \"Aang\" \"Efe\" \n\n\nWe can also use a logical vector to extract elements. Suppose you want to extract the names and ages of the people who like chocolate:\n\nnames[chocolate]\n\n[1] \"Rowan\"   \"Aang\"    \"Charlie\"\n\nages[chocolate]\n\n[1] 23 42  9\n\n\nAt each of the indices in chocolate that contain TRUE, the name and age are returned.\n\n6.6.5 Changing the defaults for a function\nThe functions we have used so far, c() and str() have worked without us having to change default behaviour. For example, if we want to calculate the mean age of our people we can use the mean() function in default form:\n\nmean(ages)\n\n[1] 24.5\n\n\nImagine Charlie would like their age removed from the dataset or that we never knew their age. We would not want a vector containing just five elements because the ages would not match the people in the same position in the vector. Instead, we would have a missing value at that position. Missing values are NA (not applicable) in R and NA is another special word, like TRUE and FALSE, that doesn‚Äôt need quotes. We can set Charlie‚Äôs age to NA using indexing:\n\nages[names == \"Charlie\"] &lt;- NA\nages\n\n[1] 23 42  7 NA 54 12\n\n\nThe == means ‚Äúis equal to‚Äù and the result of names == \"Charlie\" is a vector of logicals: FALSE FALSE FALSE  TRUE FALSE FALSE. This means ages[names == \"Charlie\"] references the age in ages at the index of Charlie in names\nIf we now try to calculate the mean age:\n\nmean(ages)\n\n[1] NA\n\n\nWe get an NA! What we really want is an average of the ages we do have. The mean() function has an argument that allows you to cope with that situation called na.rm. By default, na.rm is set to FALSE but we can set it to TRUE using\n\nmean(ages, na.rm = TRUE)\n\n[1] 27.6\n\n\n\n6.6.6 Data structures: dataframes\nWe have three vectors, names, ages and chocolate which are all part of the same dataset. By far the most common way of organising data in R is within a ‚Äúdataframe‚Äù. A dataframe, has rows and columns: each column represents a variable and each row represents a case. To make a dataframe using our three vectors we use:\n\npeople &lt;- data.frame(names, ages, chocolate)\n\nYou will see people listed in the Global environment under Data. To open a spreadsheet-like view of the dataframe click its name in the Global Environment Figure¬†6.5\n\n\nFigure¬†6.5: To open a spreadsheet-like view of the dataframe click its name in the Global Environment\n\n\n6.6.7 Tibbles"
  },
  {
    "objectID": "first_steps_rstudio.html#summary",
    "href": "first_steps_rstudio.html#summary",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "\n6.7 Summary",
    "text": "6.7 Summary"
  },
  {
    "objectID": "first_steps_rstudio.html#footnotes",
    "href": "first_steps_rstudio.html#footnotes",
    "title": "\n6¬† First Steps in RStudio\n",
    "section": "",
    "text": "If this is not a fresh install of RStudio, you might be looking at fours windows, two on the left and two on the right. That‚Äôs fine - we will al be using four shortly. For the time being, you might want to close the ‚ÄúScript‚Äù window using the small cross next to ‚ÄúUntitled1‚Äù.‚Ü©Ô∏é\nWhen we are using scripts, it is very easy to write code but forget to run it. Very often when you see this error it will because you have written the code to create an object but forgotten to execute it.‚Ü©Ô∏é\nWe will find out what an RStudio Project is very soon. You will want to use a project for most of your work - they make everything a little easier.‚Ü©Ô∏é\nYou can zoom into this at the Direct link‚Ü©Ô∏é\nRStudio makes it hard for you to forget closing quotes and parentheses because when you type an opening quote or parenthesis, it automatically adds its closing partner. When people are learning they are sometimes tempted to delete these so they can type what goes inside the quotes/parentheses and then manually add the closing partner. I strongly recommend you don‚Äôt not delete them. RStudio adds the closing character but it leaves your cursor in the right position to complete the contents.‚Ü©Ô∏é\nWe start counting from 1 in R. Most programming languages count from zero.‚Ü©Ô∏é"
  },
  {
    "objectID": "workflow_rstudio.html#understanding-the-pipe",
    "href": "workflow_rstudio.html#understanding-the-pipe",
    "title": "\n7¬† Workflow in RStudio\n",
    "section": "\n7.1 Understanding the pipe |>\n",
    "text": "7.1 Understanding the pipe |&gt;\n\nThe pipe operator improves code readability by:\n\nstructuring sequences of data operations left-to-right and top to bottom rather than from inside and out),\nminimizing the need for intermediates,\nmaking it easy to add steps anywhere in the sequence of operations.\n\nFor example, suppose we want to apply a log-square root transformation which is sometimes applied to make a flat distribution more normal. There are two approaches we could use without the pipe: nesting the functions and creating an intermediate. We will consider both of these. First, let us generate a few numbers of work with:\n\n# generate some numbers\n# this will give me ten random numbers between 1 and 100\nnums &lt;- sample(1:100, size = 10)\n\nTo apply the transformation we can nest the functions so the output put of sqrt(nums) becomes the input of log():\n\n# apply a log-square root transformation\ntnums &lt;- log(sqrt(nums))\ntnums\n\n [1] 1.903331 2.255430 1.925074 1.683648 1.880600 2.232954 2.165367 2.012676\n [9] 2.266300 1.647918\n\n\nThe first function to be applied is innermost. When we are using just two functions, the level of nesting does not cause too much difficulty in reading the code. However, you can image this gets more unreadable as the number of functions applied increases. It also makes it harder to debug and find out where an error might be. One solution is to create intermediate variables so the commands a given in order:\n\n# apply a log-square root transformation\nsqrtnums &lt;- sqrt(nums)\ntnums &lt;- log(sqrtnums)\n\nUsing intermediates make your code easier to follow at first but clutters up your environment and code with variables you don‚Äôt care about. You also start of run out names!\nThe pipe is a more elegant and readable solution. It allows you to send the output of one operation as input to the next function. The pipe has long been used by Unix operating systems (where the pipe operator is |). The R pipe operator is |&gt;, a short cut for which is Ctrl+Shift+M.\nUsing the pipe, we can apply out transformation with:\n\ntnums &lt;- nums |&gt; \n  sqrt() |&gt; \n  log()\n\nThe command are in the order applied, there are no intermediates and the code is easier to debug and to build-up step-by-step..\nNote that |&gt; is the pipe that comes with base R which was only added in the last couple of years. Before it existed, **tidyverse** had a pipe operator provided by the *magrittr** package. The magrittr pipe is %&gt;%. In your googling, you may well see code written using the %&gt;%. In most cases, the pipes are interchangeable."
  },
  {
    "objectID": "workflow_rstudio.html#rstudio-projects",
    "href": "workflow_rstudio.html#rstudio-projects",
    "title": "\n7¬† Workflow in RStudio\n",
    "section": "\n7.2 RStudio Projects",
    "text": "7.2 RStudio Projects\n\n\n.RProj indicates a folder is an RStudio Project"
  },
  {
    "objectID": "workflow_rstudio.html#folder-arrangement",
    "href": "workflow_rstudio.html#folder-arrangement",
    "title": "\n7¬† Workflow in RStudio\n",
    "section": "\n7.3 folder arrangement",
    "text": "7.3 folder arrangement"
  },
  {
    "objectID": "workflow_rstudio.html#consistency",
    "href": "workflow_rstudio.html#consistency",
    "title": "\n7¬† Workflow in RStudio\n",
    "section": "\n7.4 consistency",
    "text": "7.4 consistency"
  },
  {
    "objectID": "workflow_rstudio.html#commenting",
    "href": "workflow_rstudio.html#commenting",
    "title": "\n7¬† Workflow in RStudio\n",
    "section": "\n7.5 commenting",
    "text": "7.5 commenting"
  },
  {
    "objectID": "workflow_rstudio.html#using-the-help",
    "href": "workflow_rstudio.html#using-the-help",
    "title": "\n7¬† Workflow in RStudio\n",
    "section": "\n7.6 using the help",
    "text": "7.6 using the help"
  },
  {
    "objectID": "working_with_data_rstudio.html#summarising-data",
    "href": "working_with_data_rstudio.html#summarising-data",
    "title": "\n8¬† Working with data in RStudio\n",
    "section": "\n8.1 Summarising data",
    "text": "8.1 Summarising data\nconcepts: mean, median, mode, standard deviation, sample distribution of the mean, standard error\nthe role of data types in the type of summary"
  },
  {
    "objectID": "working_with_data_rstudio.html#summarising-and-plotting-a-single-variable",
    "href": "working_with_data_rstudio.html#summarising-and-plotting-a-single-variable",
    "title": "\n8¬† Working with data in RStudio\n",
    "section": "\n8.2 Summarising and plotting a single variable",
    "text": "8.2 Summarising and plotting a single variable\nnormal distribution, mean, sd, se, n, histogram categories mode, counts, barchart,\nusing the help Your first plot! importing data, types of file, different methds summarising data, one two, More plots saving plots tidying data"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "\n9¬† Summary\n",
    "section": "",
    "text": "Important\n\n\n\nYou are reading a work in progress. This page is a dumping ground for ideas and not really readable.."
  },
  {
    "objectID": "keyboard-shortcuts-tips.html",
    "href": "keyboard-shortcuts-tips.html",
    "title": "\n10¬† Keyboard short cuts and other tips\n",
    "section": "",
    "text": "Important\n\n\n\nYou are reading a work in progress. This page is a dumping ground for ideas and not really readable..\n\n\n\n\n\n\n\n\n\n\nDescription\nItem\nWindows/ & Linux\nMac\n\n\n\nAll the Keyboard Shortcuts\n\nAlt+Shift+K\nOption+Shift+K\n\n\nInsert the Assignment operator\n&lt;-\nAlt+-\nOption+-\n\n\nOpen a new script\n\nCtrl+Shift+N\nShift+Command+N\n\n\nRun current line/selection\n\nCtrl-Enter\nCommand-Return\n\n\nComment out current line/selection\n\nCtrl+Shift+C\nShift+Command+C\n\n\nOpen help on current function\n\nF1\nF1\n\n\nInsert the pipe operator\n|&gt;\nCtrl+Shift+M\nShift+Command+M\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlt+Shift+K"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Likert, R. 1932. ‚ÄúA Technique for the Measurement of\nAttitudes.‚Äù Archives of Psychology 22 140: 55‚Äì55."
  }
]